2020 IEEE International Conference on Robotics and Automation (ICRA)
31 May - 31 August, 2020. Paris, France
Efﬁcient Multi-Agent Trajectory Planning with Feasibility Guarantee
using Relative Bernstein Polynomial
Jungwon Park, Junha Kim, Inkyu Jang and H. Jin Kim1
Abstract—This paper presents a new efﬁcient algorithm
which guarantees a solution for a class of multi-agent trajec-
tory planning problems in obstacle-dense environments. Our
algorithm combines the advantages of both grid-based and
optimization-basedapproaches,andgeneratessafe,dynamically
feasible trajectories without suffering from an erroneous opti-
mizationsetupsuchasimposinginfeasiblecollisionconstraints.
Weadoptasequentialoptimizationmethodwithdummyagents
toimprovethescalabilityofthealgorithm,andutilizethecon-
Fig. 1: Flight in an obstacle environment with 6 quadrotors.
vexhullpropertyofBernsteinandrelativeBernsteinpolynomial
to replace non-convex collision avoidance constraints to convex
constraints between collision avoidance constraints, and we
ones. The proposed method can compute the trajectory for
64 agents on average 6.36 seconds with Intel Core i7-7700 @ introduce a sequential optimization method. This sequential
3.60GHzCPUand16GRAM,anditreducesmorethan50%of method can deal with a large scale of agents with improved
the objective cost compared to our previous work. We validate computational efﬁciency, and does not cause deadlock by
the proposed algorithm through simulation and ﬂight tests.
employing dummy agents.
Our main contributions can be summarized as follows.
I. INTRODUCTION
• A multi-agent trajectory planning algorithm is pre-
Multi-agent systems with many unmanned aerial vehicles sented for obstacle-dense environments, which gener-
(UAVs)broadentherangeofachievablemissionstocomplex ates collision-free and dynamically feasible trajectories
environments unsafe or hard to reach for humans or a single withoutapotentialoptimizationfailurebyusingrelative
agent.Forsuccessfuloperationofthesemulti-agentsystems, Bernstein polynomial.
path planning algorithm is required to generate a collision- • Asequentialtrajectoryoptimizationmethodisproposed
free trajectory in any obstacle environment. However, many withdummyagents,whichreducescomputationalload.
workshavearisktofailindenseclutteredenvironmentsdue • The source code will be released in https://
to deadlock [1, 2] or failure caused by enforcing infeasible github.com/qwerty35/swarm_simulator.
collision constraints in the formulation [3, 4]. There have been discussions in literature closely related
Inthispaper,wepresentanefﬁcientmulti-agenttrajectory to our work on multi-agent trajectory planning. In [6, 7,
planning algorithm which generates safe, dynamically feasi- 3], the trajectory generation problems are reformulated as
ble trajectories in obstacle-dense environments by extending mixed-integer quadratic programming (MIQP) or sequential
our previous work [5]. The proposed algorithm is designed convex programming (SCP) problems, that apply collision
to have the advantages of both grid-based and optimization- constraints at each discrete time step. These methods suit
based approaches. First, it guarantees the feasibility of op- wellsystemswithasmallnumberofagents,buttheyarein-
timization problem formulation by utilizing an initial tra- tractable for large teams and complex environments because
jectory computed from grid-based multi-agent path ﬁnding an additional adaptation process is required to ﬁnd proper
algorithm. Second, it generates a continuous dynamically discretization time step depending on the size of agents and
feasible trajectory by optimizing the initial trajectory with obstacles. On the other hand our method does not require
consideration of quadrotor dynamics as shown in Fig. 1. this process because we do not use time discretization.
When we formulate the optimization problem, we utilize Sequential planning proposed in [8] for better scalability
the convex hull property of relative Bernstein polynomial to is similar to our work. However, it may not be able to ﬁnd
translate non-convex collision avoidance constraints to con- a feasible solution for a crowded situation. To solve this, we
vexones.Comparedtothepreviouswork[5],wemodifythe adopt dummy agents which move along the initial trajectory
method for constructing constraints not to occur infeasible computed by a grid-based planner to prevent deadlock. The
most relevant work can be found in [9, 10]. They plan an
ThisworkwassupportedbyInstituteofInformation&Communications initialtrajectorywithagrid-basedplannerandthenconstruct
Technology Planning & Evaluation(IITP) grant funded by the Korea gov-
a safe ﬂight corridor (SFC), which indicates a safe region
ernment(MSIT)(No.2019-0-00399,DevelopmentofA.I.basedrecognition,
judgement and control solution for autonomous vehicle corresponding to of each agent. However, they need to resize SFC iteratively
atypicaldrivingenvironment) until the overall cost converges, while our proposed method
1TheauthorsarewiththeDepartmentofMechanicaland{AerospaceEn- doesnotneedanadditionalresizingprocessbyusingrelative
gineering,SeoulNationalUniversity,Seoul,SouthKorea. qwerty35,
}
wnsgk02, leplusbon, hjinkim @snu.ac.kr Bernstein polynomial.
978-1-7281-7395-5/20/$31.00 ©2020 IEEE 434
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:31 UTC from IEEE Xplore.  Restrictions apply. Recently, distributed planning is receiving much attention
due to scalability [1, 2, 4]. However, such distributed meth-
odsarenotabletoguaranteeasafesolutioninobstacle-dense
environments due to deadlock.
II. PROBLEMFORMULATION
In this section, we formulate an optimization problem to
generate safe, continuous trajectories for a multi-agent robot
system consisting of N quadrotors. We assign the mission
for the ith quadrotor to move from the start point si to the Fig.2:(Left)Obstaclecollisionmodel,(Right)Inter-collision
goal point gi. The quadrotors may have a different size with model.
radius r1,...,rNm. The maximum velocity and acceleration
D. Convex Constraints
of the ith quadrotor are vi , ai respectively.
max max
The trajectory must pass the start and goal points and
A. Assumption −
F should be continuous up to the φ 1th derivatives. Also, it
We assume that prior knowledge of the free space of
must not exceed maximum velocity and acceleration. These
the environment is given as a 3D occupancy map. We also
constraints can be written in afﬁne equality and inequality
assumethatthegrid-basedinitialtrajectoryplannerinsection
constraints respectively:
V-A can ﬁnd a solution when the grid size is d.
A c=b (4)
B. Trajectory Representation eq eq
(cid:22)
Due to the differential ﬂatness of quadrotor dynamics, A c b (5)
dyn dyn
it is known that the trajectory of quadrotor can be repre-
E. Non-Convex Collision Avoidance Constraints
sented in a polynomial function with ﬂat outputs in time t
[11]. However, it is difﬁcult to handle collision avoidance 1) ObstacleAvoidanceConstraints: Wedeﬁneanobstacle
constraints with standard polynomial basis. For this reason, collisionmodeloftheithquadrotor,whichmodelsacollision
we formulate the trajectory of quadrotors using a piecewise region between a quadrotor and obstacles (See Fig. 2):
Bernsteinpolynomial.TheBernsteinpolynomialisthelinear C { ∈R |(cid:107) (cid:107) ≤ }
combination of Bernstein (cid:18)bas(cid:19)is polynomials, and the Bern- oibs = p 3 p 22 (ri)2 (6)
stein basis polynomial of degree n is deﬁned as follows: The ith quadrotor must satisfy the condition below not to
n − − collide with obstacles:
B (t)= tk(1 t)n k (1)
k,n k pi(t)⊕Ci ⊂F, t∈[T ,T ] (7)
∈ obs 0 M
for t [0,1] and k = 0,1,...,n. The trajectory of the ith ⊕
∈ R where is the Minkowski sum.
quadrotor, pi((cid:80)t) 3, can be represented as M-segment
piecewise Bern(cid:80)stein polynomials: ∈ gio2n) bInettwere-eCnoliltihsioanndACvjothidaangceentCsocnasntrbaeintesx:prAescseodlliwsioitnhraen-
n ci B (τ ) t [T ,T ] inter-collision model i,j :
pi(t)= (cid:80)..knk==00c1i2,,kkBkk,,nn(τ12) t..∈[T01,T12] (2) Ciin,jter ={p∈inRter3 |pTEp≤(ri+rj)2} (8)
. .
∈ whereE isdiag([1,1,1/(c )2]),andc isacoefﬁcientto
n ci B (τ ) t [T − ,T ] dw dw
k=0 M,k k,n M M 1 M consider a downwash effect. The ith agent does not collide
−
wmhtherseegτmme=ntTotmf−tThTmem−i−1th1,qcuimad,kroitsort’hsetrkatjhecctoornyt,roalndpoTint−of,Tthe wreistphecthtetojtthheagitehntagifentht,eprie,jla(tti)v=e tprajj(etc)to−rypio(ft)t,hseatjitshﬁeasgethnet
m 1 m following condition:
are the start and end time of the mth segment, respectively.
Thus, the decision vector of our optimization problem, c, pi,j(t)∩Ci,j =∅, t∈[T ,T ] (9)
consists of all the control points of pi(t) for i=1,...,N. inter 0 M
Non-convexity of (7) and (9) makes it difﬁcult to directly
C. Objective Function
employ them. In the next section, we will show the method
We deﬁne the ob(cid:90)jective(cid:13)function(cid:13)to minimize the integral that relaxes those non-convex constraints to convex ones
(cid:88) (cid:13) (cid:13)
of the square of the φth d(cid:13)erivative:(cid:13) using relative Bernstein polynomial.
(cid:13) (cid:13)
J = N TM dφ pi(t) 2dt=cTQc (3) III. RELATIVEBERNSTEINPOLYNOMIAL
dtφ
i=1 T0 2 One of the useful properties of the Bernstein polynomial
where Q is the Hessian matrix of the objective function. is a convex hull property that the Bernstein polynomial is
In this paper, we set φ = 3 to minimize the jerk of the conﬁned within the convex hull of its control points [13].
trajectory, so that the input to the quadrotor becomes less This property has been used to conﬁne the trajectory to
aggressive [12]. a convex set called safe ﬂight corridor (SFC) for obstacle
435
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:31 UTC from IEEE Xplore.  Restrictions apply. (cid:104) (cid:105)∩C ∅
πi,j− ,πi,j i,j = (13)
m 1 m inter
(cid:104) (cid:105) { − | ≤ ≤ }
where πi − ,πi = απi − +(1 α)πi 0 α 1
m 1 m m 1 m
is a line segment between waypoints πi − and πi , and
− m 1 m
πi,j = πj πi . (12) shows that the initial trajectory does
m m m
not collide with obstacles, and (13) means that the agents
do not collide with other agents when all the agents move
along their initial trajectory at constant velocity.
B. Safe Flight Corridor
The mth safe ﬂight corridor (SFC) of the ith quadrotor,
S
Fig. 3: Collision avoidance constraints. The region sur- i ,isdeﬁnedasaconvexsetsatisﬁesfollowingconditions:
m
rounded by the blue dashedline is safe ﬂight corridor (SFC) S ⊕C ⊂F
i i (14)
fortheblueagent,andtheregionsurroundedbygreendashed m obs
(cid:104) (cid:105)⊂S
lineistheintersectionofrelativesafeﬂightcorridor(RSFC) πi − ,πi i (15)
m 1 m m
for the blue agent. To generate a safe trajectory, there must
The condition (14) shows that an agent in SFC does not
existintersectionbetweenSFCandRSFC(grayshadedarea).
collide with obstacles, so SFC can be used for obstacle
collision avoidance.
avoidance [14, 15]. Here, we introduce the method to con-
ﬁne the relative polynomial trajectory to inter-collision-free C. Relative Safe Flight Corridor
region by utilizing the convex hull property.
The mth relative safe ﬂight corridor (RSFC) between ith
Let the mth segment of pi(t),pj(t) be pi (t),pj (t) R
− m m and the jth quadrotor, i,j, is deﬁned as a convex set that
respectively, and pi,j(t) = pj (t) pi (t) is their relative m
m(cid:88) m m satisﬁes the following conditions:
trajectory. Then pi,j(t) can be written as
m R ∩C ∅
i,j i,j = (16)
n − m inter
pim,j(t)=(cid:88)(cjm,k cim,k)Bk,n(τm) (cid:104)πi,j− ,πi,j(cid:105)⊂Ri,j (17)
m 1 m m
k=0 (10) R ∈
n If i,j includes pi,j(t) for t [T − ,T ], then there is no
= cim,j,kBk,n(τm) collismion between the ith and jthmage1ntsmfor t∈[Tm−1,Tm]
k=0 due to (9) and (16). For this reason, we can use RSFC to
where ci,j = cj −ci is the control point of pi,j(t), avoid collision between agents.
m,k m,k m,k m
which implies that the relative Bernstein polynomial is also V. METHOD
Bernstein polynomial. Thus, by the convex hull property,
In this section, we introduce the efﬁcient trajectory plan-
we can enforce the ith and jth quadrotors not to collide
ningalgorithmusingconvexsafecorridors.Alg.1showsthe
with each other by limiting all control points ci,j within
m,k process of trajectory planning. We ﬁrst plan initial trajecto-
a convex, inter-collision free region. We call this region a
ries(line1),andweusethemtodeterminesafeﬂightcorridor
relative safe ﬂight corridor (RSFC). In this way, we can
(SFC) (line 3) and relative safe ﬂight corridor (RSFC) (line
generate the safe trajectory by adjusting SFC, RSFC.
5). After that, we compose quadratic programming (QP)
IV. DEFINITION problem using initial trajectories and safe corridors (line 8).
Finally, we scale the total ﬂight time to satisfy dynamic
In the previous work [5], we determined RSFC by choos-
feasibility constraints (line 9). The detail of each process
ingaproperoneamongpre-deﬁnedRSFCcandidates.RSFC
is described in the following subsections.
candidatesweredesignedtobeabletoutilizethedifferential
ﬂatness of quadrotor, and so as to achieve fast planning A. Initial Trajectory Planning
speed. However, it may fail to ﬁnd a trajectory because a
To plan an initial trajectory, we use a graph-based multi-
feasible region that satisﬁes both RSFC and SFC constraints
agentpathﬁnding(MAPF)algorithm.AmongvariousMAPF
may not exist. To guarantee the existence of such feasible
algorithms such as [16, 17], we choose enhanced conﬂict-
region as Fig. 3, we precisely deﬁne three key terms in this
basedsearch(ECBS)forthefollowingtworeasons:(i)ECBS
paper: initial trajectory, SFC, and RSFC.
can ﬁnd a suboptimal solution in a short time. Because the
optimal MAPF algorithm is NP-complete [18], it could be
A. Initial Trajectory
better to use a suboptimal MAPF solver with respect to
{ An initia}l trajectory of the ith quadrotor, πi = computation time. (ii) The ECBS algorithm is complete. To
π0i,...,πMi , is deﬁned as a path that(cid:54)satisﬁes the following guarantee completeness of Alg. 1, individual submodules in
conditions for all m=0,...,M and i=j: the algorithm must be complete.
To utilize the graph-based ECBS in our problem, we
πi =si,πi =gi (11)
0 M formulate the planInitialTrajectory function in line 1, Alg 1
(cid:104) (cid:105)⊕C ⊂F
πi − ,πi i (12) as follows. First, we translate the given 3D occupancy map
m 1 m obs
436
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:31 UTC from IEEE Xplore.  Restrictions apply. Algorithm 1: Trajectory Planning Algorithm
Input: start point si, goal point gi for agents
∈{ } E
i 1,...,N , 3D occupancy map
Output: total ﬂight time T, trajectory pi(t) for
∈{ } ∈
agents i 1,...,N , t [0,T]
← ∀ ∀ E
1 π =(π1,...,πN) planInitialTraj(s i, g i, );
←
2 for i 1 to N do
S S S ← E
3 i =( i,..., i ) buildSFC(πi, );
←0 M
4 for j i+1 to N do (a) Before coordinate trans- (b)Aftercoordinatetransfor-
R R R ←
5 i,j =( i,j,..., i,j) buildRSFC(πi,πj); formation. mation.
0 M
end
6 Fig. 4: Construction of relative safe ﬂight corridor. The red
end
7 ellipsoid is an inter-collision model between the quadrotors
← S∀ R∀
8 p0(t),...,pN(t) ←trajOpt(π, i, i,j>i); i,j, and the green-shaded region is the relative safe ﬂight
9 T,p0(t),...,pN(t) timeScale(p0(t),...,pN(t)); corridor(cid:101)(RSFC)(cid:101). (cid:101)
10 return T,p0(t),...,pN(t) (cid:107) (cid:107)
where n = πi,j / πi,j . As depicted in Fig(cid:101). 4a, our
min min min
RSFC is a half-space divided by the plane, which is tangent
intoa3Dgridmapwithgridsized.Next,wesetconstraints −
which determine conﬂict in the ECBS algorithm to satisfy to the inter-collision model at the πmi,jin = E 12πmi,jin. We
note that the convex set in (18) satisﬁes the deﬁnition of
the condition (13). After that, we give start and goal points
RSFC, but we omit the proof due to page limits.
as the input and compute the initial trajectory. If start and
goal points are not located on the 3D grid map, then we D. Sequential Trajectory Optimization
use the nearest grid points instead and append the start/goal
Optimizing all control points of polynomials at once can
points to both ends respectively.
cause the scalability problem because the time complexity
B. Safe Flight Corridor Construction of the QP solver is O(n3). Here, we propose an efﬁcient
Alg. 2 shows the construction process of safe ﬂight cor- sequential optimization method using dummy agents.
(cid:104) (cid:105)
ridor (SFC). We initialize SFC to πi − ,πi to fulﬁll the
m 1 m
condition (15) (line 3). For all direction, we check whether Algorithm 3: trajOpt
SFC is expandable (line 5-9), and we expand SFC by a pre- S∀
Input: initial trajectory π, safe ﬂight corridor i,
speciﬁedlength(line10).Thisalgorithmguaranteestoreturn R∀
relative safe ﬂight corridor i,j>i
convex sets that satisfy the deﬁnition of SFC. ∈ ∈
Output: trajectory pi(t) for agents i b, t [0,T]
←
1 p (t)=(p0 (t),...,pN (t)) planDummy(π);
Algorithm 2: buildSFC dmy← dmy dmy
2 for l 1 to N do
E ← b
12 IODfonurp←tuSmptu:{←t±i:←nxsi1ta,i(cid:104)fa±teloyﬂt,rMia±gjhezdct}toc;oor(cid:105)yrriπdio,r3SDio=cc(uSp0ia,n..c.y,SmMia)p 6345 endbppbd(mty)a(←tg)en←stoslpvin(etQ)lt;Ph(πbba,tcShb;,R∀i,j>i,p∀dmi∈/yb(t));
3 mi πmi −1,πmi ; 7 return p0(t),...,pN(t)
4 while D is not empty do
5 for µSin D do Alg.3showstheprocessofsequentialoptimization.First,
6 if mi ←canno\t expand to direction µ then wegeneratetrajectoriesfordummyagentsp (t)usingthe
dmy
7 D D µ followingcontrol points (line 1):
end
8
−
9 end  πi − k =0,...,φ 1
S m 1 − −
10 expand i to all direction in D; ci = πi k =n (φ 1),...,n (19)
end m m,k m∈(cid:104) (cid:105)
11 x πi − ,πi else
end m 1 m
12
Next, we divide the agents into N batches, and we solve
b
C. Relative(cid:101)Safe Flight Corridor Construction the below QP problem for the batch b (line 3-4):
To build RSFC, we ﬁrst perform afﬁne coordinate trans-
minimize cTQc
ft(cid:101)hoerminatteior-ncoxll=isioEnC(cid:101)12mx,owdehleCreiin,jEt(cid:101)er12(cid:101)ainsddiian(cid:101)git(ia[1l,t1ra,j1e/cctodrwy])π.iT,jhaerne, subject to Aeqc=beq ∀ ∈
transformed to i,j and πi,j as shown in Fig. 4b. Let ci =control points of pi (t), i / b,m,k
inter (cid:104) (cid:105) m,k ∈S dmy ∀ ∈
πi,j be the nearest point of πi,j− ,πi,j to the origin. We ci i , i b,m,k
min (cid:101) (cid:101) (cid:101) m 1 m m,k m
construct RSFC as follows: − ∈R ∀
cj ci i,j i,j >i,m,k
Rim,j ={x=E−12x|x·nmin−(ri+rj)>0} (18) m,k m,k m (20)
437
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:31 UTC from IEEE Xplore.  Restrictions apply. where c ∈ RNNbM(n+1), Aeq ∈ RNNb(M+1)φ×−NNbM(n+1),
and the number of inequality constraints is (N 1(N +
1))N M(n+1). pi (t) is the trajectory for ith 2duNmbmy
agenNtb. At last, we redpmlayce the trajectory of dummy agents to
the previously planned one (line 5), and plan the trajectory
for the next batch sequentially.
Fig. 5 visualizes the overall process. For each iteration,
we deploy dummy agents except the agents in the current
batch (Fig. 5a). Then, we plan the trajectory for the current (a)Deploydummyagents. (b) Plan for one batch.
batch to avoid dummy agents (Fig. 5b). After that, agents
in the current batch are used as dummy agents at the next
iteration (Fig. 5c). At the end of the iteration, collision-free
trajectoriesarefoundwithoutdeadlockbecausealltheagents
are planned to avoid the previous batch (Fig. 5d).
This sequential method can achieve better scalability be-
cause we can avoid the high time complexity of QP solver
by increasing the number of the batch as the number of
agents increases while keeping the same number of decision (c)Replacedummyagents (d) Plan for next batch.
variablesofQP.Furthermore,wecanprovethat(20)consists with the previous batch.
of feasible constraints, which means that our method does
Fig. 5: Sequential planning with dummy agents when N =
not cause optimization failure due to infeasible constraints. b
2. Dummy agent is depicted as a black circle, and agent in
≥ −
Theorem1. Ifn 2φ 1,thenthereexistsadecisionvector the current batch is depicted as a colored circle. For each
c that satisﬁes the constraints of eq. (20) for all iterations. iteration, we plan a trajectory for the current batch (color
line)thatavoidsthetrajectoryofdummyagents(blackline).
Proof. For any iteration l, let us assign the decision vector
∈
c as (19) for i b and m = 1,...,M. Then c satisﬁes
the waypoint constraints due to (11). pi(t) is continuous up
− −
to φ 1th derivatives at t = T for m = 1,...,M 1
m
because ci − − = ci − = πi . c also fulﬁlls
m,n (φ 1):n m+1,0:φ 1 m
safe corridor constraints due to (15) and (17). Note that
−
trajectories in the iteration 1,...,l 1 do not collide with
trajectories in the current batch because they are planned to
avoid dummy agents which consist of control points (19). ×
Fig.6: Trajectorygeneratedfor16agents ina10m 10m
Thus, c is the decision vector that satisﬁes the constraints of ×
2.5 m random forest. Agents are marked with colored
(20).
circles at the goal (assigned to the opposite of the start
points), along with their trajectories.
In (20), we do not consider dynamic limits in the QP
problem because they can be infeasible constraints for QP. B. Comparison with Previous Work
Instead, similar to [9], we scale the total ﬂight time for all
Tovalidatetheperformanceofourproposedalgorithm,we
agents uniformly after optimization (line 9 of Alg. 1).
compared the result with previous work [5]. We conducted
the simulations in 50 random forests. Each forest has a size
VI. EXPERIMENTS × ×
of 10 m 10 m 2.5 m and contains randomly deployed
× ×
20 trees of size 0.3 m 0.3 m 1–2.5 m. We assigned
A. Implementation Details
start point of quadrotors in a boundary of the xy-plane in 1
The proposed algorithm is run in C++ and executed the m height, and the goal points at the opposite to their start
proposedalgorithmonaPCrunningUbuntu18.04.withIntel position as shown in Fig. 6.
Core i7-7700 @ 3.60GHz CPU and 16G RAM. We model 1) Success Rate: We executed the simulation with 16
∀
the quadrotor with radius r i = 0.15m, maximum velocity agents, and measured the success rate by the size of agents.
∀ ∀
v i = 1.7m/s, maximum acceleration a i = 6.2m/s2 As shown in the left graph of Fig. 7, both methods show a
max max
anddownwashcoefﬁcientc =2basedonthespeciﬁcation 100% success rate in 50 random forest when the radius of
dw
of Crazyﬂie 2.0 in [10]. We use the Octomap library [19] to agents is small, but the success rate of [5] decreases as the
represent the 3D occupancy map and use CPLEX QP solver sizeofagentsincreases.Itisbecausethelargertheagentsize,
[20]fortrajectoryoptimization.Thedegreeofpolynomialsis the smaller the space for agents can exist, which lead to the
determinedton=5tosatisfytheassumptionintheTheorem higherprobabilitythattheconstraintsforSFCandRSFCare
1.Weplantheinitialtrajectoryin3Dgridmapwithgridsize infeasible each other. On the contrary, the proposed method
d=0.5 m, and set suboptimal bound of ECBS to 1.3. shows a perfect success rate for all case because we design
438
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:31 UTC from IEEE Xplore.  Restrictions apply. TABLEI:Computationtimecomparisonwithpreviouswork TABLE II: Comparison of proposed algorithm and SCP-
[5]. The numbers in parentheses represent the computation based method.
time increment when the number of agents is doubled.
Comp. Total Safety Total
ComputationTime(s)
Timeper Comp. Margin Flight
Agents 4 8 16 32 64
Iter.(s) Time(s) Ratio Dist.(m)
[5] 0.093 0.19 0.81 5.30 51.1
(×2.0) (×4.3) (×6.5) (×9.6) SCP(h=1.0s) 0.78 2.80 12% 77.29
Proposed(N =1) 0.11 0.29 1.15 11.1 197.0 SCP(h=0.5s) 5.5 20.5 81% 77.36
b (×2.7) (×3.9) (×9.6) (×17.8) SCP(h=0.34s) 16.2 60.4 92% 77.38
Proposed(N/N =4) 0.11 0.23 0.59 1.55 6.36 SCP(h=0.25s) 42.1 156.6 96% 77.40
b (×2.2) (×2.5) (×2.6) (×4.1) Proposed(Nb=1) - 0.65 101% 90.74
(a) SCP-based [7] (b) Proposed
Fig. 7: Comparison with previous work [5]. (Left) The
Fig. 8: Trajectory planning result of the propose algorithm
success rate for 16 agents, (Right) Objective cost and com-
and SCP-based method in empty space. The dots in (b) are
putation time for 64 agents by the number of batches N .
b the initial trajectory of corresponding agents.
SFC and RSFC to feasible each other.
on each trajectory. On the contrary, the proposed method
2) Solution Quality: As depicted in the right graph of
satisﬁes the safety condition completely.
Fig.7,theproposedalgorithmshowsbetterperformancewith
Although the proposed method perform better in com-
respecttobothobjectivecostandcomputationtimecompare
putation time and safety margin, it has longer total ﬂight
to previous work when the number of the batch Nb is more distance compared to the SCP method. It is because our
than one. It can generate a trajectory for 64 agents in 6.36
initialtrajectoryisnotoptimalrespecttototalﬂightdistance
s (Nb =16), and it has 78% (Nb =1), 53% (Nb =16) less in non-grid space. Thus, we need to plan initial trajectory
objective cost. Note that we can adjust Nb depending on the considering total ﬂight distance, and leave it as future work.
desired objective cost and computation time.
3) Scalability Analysis: The computation time increment D. Flight Test
by the number of agents is shown in Table I. When the We conducted real ﬂight test with 6 Crazyﬂie 2.0 quadro-
number of agents is small, the computation time increases torsina5mx7mx2.5mspace.WeusedCrazyswarm[21]
linearly, regardless of the trajectory optimization method, to follow the pre-computed trajectory, and we used Vicon
but it follows the time complexity of QP solver as the motion capture system to obtain the position information at
numberofagentsincreasesifwedonotadoptthesequential 100 Hz. The snapshot of the ﬂight test is shown in Fig. 1,
optimization method. On the other hand, if we maintain the and the full ﬂight is presented in the supplemental video.
sizeofthebatch(N/N ),itstillshowsgoodscalabilitywith
b VII. CONCLUSIONS
the high number of agents.
Wepresentedanefﬁcienttrajectoryplanningalgorithmfor
C. Comparison with SCP-based Method multiplequadrotorsinobstacleenvironments,combiningthe
We compared the proposed algorithm with SCP-based advantages of grid-based and optimization-based planning
method [7]. Experiments are done in 10 m × 10 m × 2.5 algorithm.UsingrelativeBernsteinpolynomial,wereformu-
m empty space with 8 agents. Start position and goal points lated trajectory generation problem to convex optimization
are same as the previous experiment as shown in Fig. 8, and problem,whichguaranteestogeneratecontinuous,collision-
we assigned the same total ﬂight time to both algorithm. free, and dynamically feasible trajectory. We improved the
Table II shows that the proposed algorithm requires less scalability of the algorithm by using sequential optimization
computation time for all the cases, and this result does not method, and we proved overall process does not cause the
change when we stop the SCP at the ﬁrst iteration with failure of optimization if there exist initial trajectory. The
collision avoidance constraints. The third column shows the proposed algorithm shows considerable reduction in com-
safety margin ratio of each method. Safety margin ratio putation time and objective cost compared to our previous
is calculated by min di,j /(ri + rj), where di,j is a work, and it shows better performance in computation time
minimum distance beit,wjemenintwo agents i,j. Safetmyimnargin and safety, compared to SCP-based method.
ratiomustbeover100%toguaranteethecollisionavoidance, Infuturework,weplantodevelopinitialtrajectoryplanner
however, SCP-based method does not satisfy this because thatoptimizes totalﬂight distancein non-gridspace,and we
SCPchecksonlycollisionavoidancebetweendiscretepoints will extend our work to dynamic obstacle environment.
439
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:31 UTC from IEEE Xplore.  Restrictions apply. REFERENCES [13] MichaelZettlerandJu¨rgenGarloff.“Robustnessanal-
ysisofpolynomialswithpolynomialparameterdepen-
[1] DamanBareissandJurVandenBerg.“Reciprocalcol-
dency using Bernstein expansion”. In: IEEE Transac-
lisionavoidanceforrobotswithlineardynamicsusing
tions on Automatic Control 43.3 (1998), pp. 425–431.
lqr-obstacles”. In: Robotics and Automation (ICRA),
[14] Sarah Tang and Vijay Kumar. “Safe and complete
2013 IEEE International Conference on. IEEE. 2013,
trajectory generation for robot teams with higher-
pp. 3847–3853.
order dynamics”. In: 2016 IEEE/RSJ International
[2] Dingjiang Zhou et al. “Fast, on-line collision avoid-
ConferenceonIntelligentRobotsandSystems(IROS).
ance for dynamic vehicles using buffered voronoi
IEEE. 2016, pp. 1894–1901.
cells”. In: IEEE Robotics and Automation Letters 2.2
[15] Fei Gao et al. “Online safe trajectory generation for
(2017), pp. 1047–1054.
quadrotors using fast marching method and bernstein
[3] Yufan Chen, Mark Cutler, and Jonathan P How.
basis polynomial”. In: 2018 IEEE International Con-
“Decoupled multiagent path planning via incremental
ference on Robotics and Automation (ICRA). IEEE.
sequential convex programming”. In: Robotics and
2018, pp. 344–351.
Automation (ICRA), 2015 IEEE International Confer-
[16] Glenn Wagner and Howie Choset. “M*: A complete
ence on. IEEE. 2015, pp. 5954–5961.
multirobot path planning algorithm with performance
[4] Carlos E Luis and Angela P Schoellig. “Trajectory
bounds”. In: 2011 IEEE/RSJ International Confer-
generation for multiagent point-to-point transitions
ence on Intelligent Robots and Systems. IEEE. 2011,
via distributed model predictive control”. In: IEEE
pp. 3260–3267.
RoboticsandAutomationLetters4.2(2019),pp.375–
[17] Guni Sharon et al. “Conﬂict-based search for optimal
382.
multi-agentpathﬁnding”.In:ArtiﬁcialIntelligence219
[5] Jungwon Park and H. Jin Kim. Fast Trajectory Plan-
(2015), pp. 40–66.
ning for Multiple Quadrotors using Relative Safe
[18] Jingjin Yu and Steven M LaValle. “Structure and
Flight Corridor. 2019. eprint: arXiv : 1909 .
intractability of optimal multi-robot path planning
02896.
on graphs”. In: Twenty-Seventh AAAI Conference on
[6] Daniel Mellinger, Alex Kushleyev, and Vijay Kumar.
Artiﬁcial Intelligence. 2013.
“Mixed-integer quadratic program trajectory genera-
[19] Armin Hornung et al. “OctoMap: An efﬁcient proba-
tion for heterogeneous quadrotor teams”. In: Robotics
bilistic 3D mapping framework based on octrees”. In:
and Automation (ICRA), 2012 IEEE International
Autonomous robots 34.3 (2013), pp. 189–206.
Conference on. IEEE. 2012, pp. 477–483.
[20] ILOG CPLEX. 12.7. 0 User’s Manual. 2016.
[7] Federico Augugliaro, Angela P Schoellig, and Raf-
[21] James A Preiss et al. “Crazyswarm: A large nano-
faello D’Andrea. “Generation of collision-free trajec-
quadcopter swarm”. In: Robotics and Automation
tories for a quadrocopter ﬂeet: A sequential convex
(ICRA), 2017 IEEE International Conference on.
programming approach”. In: Intelligent Robots and
IEEE. 2017, pp. 3299–3304.
Systems (IROS), 2012 IEEE/RSJ International Con-
ference on. IEEE. 2012, pp. 1917–1922.
[8] D Reed Robinson et al. “An Efﬁcient Algorithm
for Optimal Trajectory Generation for Heterogeneous
Multi-Agent Systems in Non-Convex Environments”.
In:IEEERoboticsandAutomationLetters3.2(2018),
pp. 1215–1222.
[9] Wolfgang Ho¨nig et al. “Trajectory planning for
quadrotor swarms”. In: IEEE Transactions on
Robotics 34.4 (2018), pp. 856–869.
[10] Mark Debord, Wolfgang Ho¨nig, and Nora Ayanian.
“Trajectory planning for heterogeneous robot teams”.
In: 2018 IEEE/RSJ International Conference on In-
telligent Robots and Systems (IROS). IEEE. 2018,
pp. 7924–7931.
[11] Daniel Mellinger and Vijay Kumar. “Minimum snap
trajectory generation and control for quadrotors”. In:
RoboticsandAutomation(ICRA),2011IEEEInterna-
tional Conference on. IEEE. 2011, pp. 2520–2525.
[12] Mark W Mueller, Markus Hehn, and Raffaello
D’Andrea. “A computationally efﬁcient motion prim-
itiveforquadrocoptertrajectorygeneration”.In:IEEE
TransactionsonRobotics31.6(2015),pp.1294–1310.
440
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:31 UTC from IEEE Xplore.  Restrictions apply. 