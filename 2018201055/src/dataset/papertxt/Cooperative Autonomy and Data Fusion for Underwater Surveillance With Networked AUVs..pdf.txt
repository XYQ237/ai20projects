2020 IEEE International Conference on Robotics and Automation (ICRA)
31 May - 31 August, 2020. Paris, France
Adaptive Directional Path Planner for Real-Time, Energy-Efﬁcient,
Robust Navigation of Mobile Robots
Mallikarjuna Rao Nimmagadda1, Shreela Dattawadkar1, Sriram Muthukumar1, and Vinayak Honkote1
Abstract—Autonomous navigation through unknown and
complex environments is a fundamental capability that is
essential in almost all robotic applications. Optimal robot
path planning is critical to enable efﬁcient navigation. Path
planning is a complex, compute and memory intensive task.
Traditionalmethodsemployeithergraphbasedsearchmethods
or sample based methods to implement path planning, which
are sub-optimal and compute/memory-intensive. To this end,
anAdaptiveDirectionalPlanner(ADP)algorithmisdevisedto
achieve real-time, energy-efﬁcient, memory-optimized, robust
local path planning for enabling efﬁcient autonomous naviga-
tionofmobilerobots.TheADPalgorithmensuresthatthepaths
are optimal and kinematically-feasible. Further, the proposed
Fig. 1: Mobile robots in action for covering 5mx5m area
algorithmistestedwithdifferentchallengingscenariosverifying
the functionality and robustness. The ADP algorithm imple- workoncontinuousspacetoﬁndanoptimalpathandrequire
−
mentation results demonstrate 40 60X less number of nodes
− a lot of iterations to converge and are hence compute and
and 40 50X less execution time compared to the standard
memory intensive [11–15]. For better navigability, kinody-
TP-RRT schemes, without compromising on accuracy. Finally,
the algorithm has also been implemented as an accelerator for namic variants of sampling based methods (TP-RRT) were
non-holonomic, multi-shape, small form factor mobile robots introduced [16]. However, these methods do not guarantee
to provide a silicon solution with high performance and low optimal paths and require large memory for storing path
memory footprint (28KB).
models in the form of lookup tables. The compute is also
I. INTRODUCTION high as the states are sampled in continuous space [6,16–
26]. Separately, an alternative approach is proposed using
Autonomous mobile robots, working intelligently and col-
graphsearchalgorithms(A*/D*)whichisappliedoverﬁnite
lectively to accomplish complex missions beyond the capa-
discretization (e.g., on a grid, or a cell decomposition of
bility of a single robot, are required for a wide range of ap-
the state space) that is predetermined. The optimality of
plications such as, search-and-rescue, precision agriculture,
these algorithms is limited by the grid resolution. Higher
industrial automation, surveillance and mapping. Effective
the grid resolution, higher the probability of an optimal path
navigationisacriticalcapabilityrequiredforenablingrobust
and higher the memory storage. The memory requirements
operationofsuchmobilerobotsystems[1].Inordertoenable
and execution time grow exponentially with dimensionality
time critical functionalities on autonomous mobile robots,
(ﬁner grids) of the state space [27]. Thus, the existing
the navigation capabilities need to run in real time. Efﬁcient
approachesarecomplex,requirehighcomputeresourcesand
realization of path planning is a key ingredient for effective
memory requirements making them unsuitable for real-time
autonomous navigation. In any mobile robotic application,
autonomous navigation of mobile robots.
path planning is a complex, compute and memory intensive
In swarm systems [28], low-cost, small form-factor and
operation. The operation of mobile robots in an unknown,
extended operating time are desired parameters. The com-
cluttered environments makes the realization of a path plan-
putation tasks are required to be carried out with extreme
ner further complex.
energy efﬁciency. For real-time navigation, it is imperative
Traditionally, the path planning problem is solved by
forplannertorunatahighframerateandensurethepathis
sampling based methods, such as, RRT (Rapidly exploring
kinematically constrained. The state-of-the-art path planning
Random Tree). In these methods, the focus is on ﬁnding a
techniques described above require capable cores/servers for
feasible path quickly. The optimality and kinematic feasi-
efﬁcientexecution.Theycannotbedeployedontothesesys-
bility of the path are not guaranteed [2–10]. Many variants
temswhichareconstrainedbypower,compute,memoryand
ofsamplingmethods(RRT*,iRRT*,Bi-RRT,RRT-Connect)
cost. Typically, for small form factor robots, path planning
have been proposed to address the optimality limitations
task is off-loaded on to a server/cloud due to limited avail-
observed in standard sampling based methods. They usually
ability of power, compute and memory resources. However,
1Silicon and Systems Prototyping Lab, Intel Labs, India forsmoothnavigationandefﬁcientmissionaccomplishment,
mallikarjuna.rao.nimmagadda@intel.com, realtimeplanningwithfastresponsetimeintheorderoffew
shreela.dattawadkar@intel.com,
milliseconds is desired. To meet these tight constraints, the
sriram.k.muthukumar@intel.com,
vinayak.honkote@intel.com planner needs to execute on the edge.
978-1-7281-7395-5/20/$31.00 ©2020 IEEE 455
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:46 UTC from IEEE Xplore.  Restrictions apply. Fig. 3: Ackerman-steering model of robots
Fig.2:PathfromADPonarandomworld.Theworkspaceis
exploredwithonly16nodestoﬁndanoptimalkinematically spiralsegmenttrajectoriesareusedconsideringthekinematic
constrained path from start to goal position constraintsoftherobot.InFig.3,atypicalrepresentationfor
an Ackermann drive robot is presented for a simple car-like
Tothisend,anenergyefﬁcientAdaptiveDirectionalPlan-
robot.Thisrobotcanbeimaginedasarigidbodythatmoves
ner (ADP) is presented for enabling efﬁcient autonomous in a plane that has a state space denoted byC=R2XS1.
navigation of small form factor robots. A sample setup is
A state conﬁguration for the robot is denoted by p =
shown in Fig. 1. The key contributions of this paper are:
(x,y,θ) as shown in Fig. 3. The rigid body frame of the
1) A novel ADP algorithm to achieve real-time, energy-
robot places the origin at the center of the rear axle, with its
efﬁcient, memory-optimized, robust path planning.
x-axis pointing along θ. Let v denote the forward speed of
2) Analgorithmfornonuniformdiscretizationofw-space
the robot, L denote the distance from the front to rear axles
andexplorationusinginformedsearchtechniquesfrom
and φ denote the steering angle of the front wheels. The
graph based methods.
non-holonomic nature of the robot is related to a kinematic
3) An algorithm to down-size the obstacle map and ex-
constraint that does not allow the robot to move laterally.
plore the neighborhood efﬁciently through connected
Thisimposesacondition,dy/dx=tanθ whichcanbesolved
component labeling scheme.
as: −
4) A technique to consider the underlying non-uniform (dy/dt)cosθ (dx/dt)sinθ =0 (1)
grids as continuous and employing search schemes x˙=dx/dt=vcosθ; y˙=dy/dt=vsinθ.
from sampling based methods for optimal path com- Now, if the steering angle is ﬁxed at φ, the robot moves in
putation. a circular trajectory that has a radius ρ. Let dw denote the
5) Combiningthesampling-basedapproachincontinuous distance travelled by the robot along the circular trajectory
space and graph-based approach in discrete space to in dt. Then,
reduce the memory and compute complexity. dw=ρ dθ; ρ =L/tanφ;
The remainder of the paper is organized as below. The which gives, dθ = tanφdw, (2)
L
preliminaries and problem formulation are presented in Sec- as dw/dt=v; θ˙ =dθ/dt=(v/L)tanφ.
tiisodnesIIc.riObevderianllSmecettihoondoIIlIo.gEyxwpeirthimtehnetspraonpdorseesdulatlsgaorreithdmiss- Usosuthaallty,|vtφhe<stφemearixn|.gTahneglmeaisxibmouumndesdteebryinsgomanegφlemaimx<pliπe/s2a,
cussedinSectionIV.ConclusionsarepresentedinSectionV. minimum turning radius.
To generate kinematically feasible paths for the robot,
II. PRELIMINARIESANDPROBLEMFORMULATION
we use two path models among the set of various Param-
The robot motion model is presented in Section II-A. In eterized Trajectory Generators (PTGs) namely, C-PTG and
the second half of this section (Section II-B), the problem A-PTG [17]. PTGs are path models characterized by the
formulation is presented. trajectory parameter that determines the curvature of the
trajectory. Constraints such as the robot speed limit or other
A. Robot Motion Model
kinematic constraints need to be considered while designing
In this paper, we aim at driving a kinematically con- these PTGs. A car-like Ackermann-drive robot will impose
strained, any shape mobile robot in a planar scenario. The a constraint on minimum turning radius, which becomes a
robot is required to move towards the target location while maximum angular-to-linear velocity ratio that needs to be
avoiding the obstacles and fulﬁlling the kinematic con- maintained during navigation.
straints. For holonomic robots, straight paths are employed
B. Problem Formulation
as there are no kinematic constraints on them. However, for
non-holonomic robots, various kinds of path models includ- Let W = Rn be the state space that contains obstacles
⊆
ing circular trajectories, asymptotically heading trajectories, for the planning problem. Let W W be the space with
o
456
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:46 UTC from IEEE Xplore.  Restrictions apply. obstacles. A conﬁguration p describes the pose of the robot, Algorithm 1 ADP
and the conﬁgur∈ation space C is the set of all possible 1: Input: pstart,p∈goal,W,W0 ∈
conﬁgurations p C. For a planar robot, the conﬁguration 2: Output: p(t) Cfree fort [0,T]
space is given by C =R2XS1. Let B(p) denote the robot 3: ←{ fr}omp←(0)=p←starttop(T)=pgoal
shape translated as a rigid body in conﬁguration p. The set 4: V ←ps{tart−;E φ;C− φ;}τ =(V,E)
ofconﬁgurationsthatavoidscollisionwithobstaclesiscalled 5: PTG C PTG,A PTG
the free space Cfree in which the robot is allowed to move. 6: pcp=←pstart
Free space is given by: 7: CADP NO(cid:54)∈N UNIFORM GRIDS(pstart,pgoal,W,W0)
Cfree=p∈C|B(p)∩Wo=φ. (3) 89:: whiPleN(cid:48)p←←goaNlEXVTdNo:ODE(pcp) (cid:48)⊆
desLieretdpﬁstanratl∈stCatfere.eTbheetohpetiinmitailaplasttahteplaanndnipnggoaplr∈obClefmreeibsethtehne 1101:: Wfoor eacShQU←pnA∈REPNCdLoIP:(pcp);Wo Wo
dfthoeerﬁkntie∈nde[ma0s,aTﬁtin]cadflirlnoygmctohnpes(t0lre)aai=snte-cdposrtsaotrbtcoottondtiypnn(uTaom)usi=cps.aptLghoeatpl(fst(a)pt∈i(stfC)y)finrbegee 111234::: EhEˆ(cid:2)(cid:2)(PP←pTTnGG)←={(cid:107)φPpRgOo(cid:2)(cid:2)aCl∀−E∈pDnG(cid:107)E(p}cp(cid:3),(cid:3)pn,EPTG={φ},Wo(cid:48))
the cost of an optimal path from p to p constrained 15: e min e[d], e EPTG
tthoh(epp(actso)s)sttehosrtfoimuthgaehtesepx(tahtc)et∈cooCpstftirmereea.qlTupihraeetdhfusttfonarrcotetmixotnepnsgdtga(orpatthl(etto))papct(ahtp)tfuraornemds 111678::: (cid:0)Cee g←fˆ+ˆ((pp{nn(cid:1)e))}]]==ee ggˆˆ((ppcnp))]]++hˆe([pdn])
p(t) to pgoal. As h(.) is a heuristic function that is generally 19: end for
unknown, hˆ(.) may be used as an admissible estimate. hˆ(.) 20: if C≡φ then
(cid:8) (cid:9)
estimatestheleastcostpathfrom p(t)to pgoal bycomputing 21: break;
theeuclideandistance.Then,thefunction fˆ(p(t))represents 22: else
← ∀ ∈
an admissible estimate of the cost of a path from pstart to 23: elow min e[fˆ(pn)], e C
p :
goal fˆ(p(t)):=g(p(t))+hˆ(p(t)). (4) 2245:: Cen←d−←i{felow}
An admissible heuristic fˆ(.) never overestimates the actual 26: pc←p {elow}[pn]
cost to reach p : 27: V + pcp
∀ ∈goal ≤ ∈ 28: (cid:0)E←+ {elow(cid:1)}
p(t) Cfree, fˆ(p(t)) f(p(t)), t [0,T]. (5) 29: end while (cid:0) (cid:1)
∈
and thus guarantees an optimal path [27]. 30: if pgoal V then
31: BACK TRACK τ,pstart,pgoal ;
III. METHODOLOGY 32: else
33: NoPath
Given the start pose, goal pose and the obstacle map,
34: end if
the functionality of Adaptive Directional Planner (ADP)
is to ﬁnd collision-free, kinematically-feasible paths for
NON UNIFORM GRIDS (Algorithm 1, Line 7): A con-
arbitrarily-shaped vehicles connecting the start pose to the tinuous state space, W =Rn, is composed of a state vec-
goal pose. The ADP algorithm is presented in Algorithm 1.
The algorithm starts with the tree, τ = (V,E), where the tor, w=[w1,w2.....wn], where n is the number of state vari-
ables that deﬁneW; w is a speciﬁc state variable. Then, for
vertices V represent the robot state conﬁgurations and the i
each state variable, lower and upper boundaries, wl and wu,
edges E are the kinematically-feasible trajectories. Initially, i i
are speciﬁed based on the location of the obstacles as
the tree only contains the initial position of the robot, p
start follows:
as a vertex. The tree is grown from p towards p by ≤ ≤
exploring the state space,W, using edgsteasrtthat are gengeoarlated wli wi wui, i=1,2,3.....n (6)
by PTGs. The discretization consists of dividing W into non-uniform
ADP algorithm considers the continuous state space with grids,knownasADPgrids.Non-uniformgridshavespeciﬁc
different levels of space discretization. The ﬁrst level of areaswithdifferentresolutionsdependingonthelocationand
discretization is referred to as ADP grids (C ). This has density of the obstacles inW. Since the underlying world is
ADP
low resolution and it helps in maintaining the directionality continuous,therobotisnotforcedtoexactlybeinthecenter
towards the goal. The ﬁner level of discretization with of these grids and we identify all the positions of the bot as
higherresolution,calledcollisiongrids(CCG),areembedded relevant ones. For n = 2, this becomes a 2-D continuous
in ADP grids to consider the feasible paths through the state space as shown in the Fig. 4a. Unlike the traditional
narrowspacesbetweentheobstacles.Theresolutionofthese grid based algorithms, the whole grid is not marked off as
collisiongridsisdeterminedbythedegreeofoptimalitywith occupied because of presence of an obstacle in the ADP
which the paths have to be found in narrow spaces. grid. From the current position of the bot (current node),
457
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:46 UTC from IEEE Xplore.  Restrictions apply. Algorithm 2 SQUARE CLIP Algorithm 3 PROCESS EDGE
{ } (cid:48)
1: Input: pcp,(cid:48)W⊆o 1: Input: pcp,pn,EPTG= φ ,Wo
2: Outpu←(cid:0)t: Wo Wo,CAD(cid:1)P,CCG 2: Output: EPT∈G
3: CADP Neighb∈orADPCells(pcp) 3: for eac←h ptg− PTG do:
4: for each cA∩DP CA(cid:54)DP do: 4: pr← pn pcp
5: if (Wo ←cADP)=φ then 5: α← pt(cid:0)g←-1(pr) (cid:1)
6: CCG Divide∈(cADP,∩RCG) 6: d 0;t (cid:54) 0;p(t)=(0,0,0)
7: for each qobs (Wo cADP) do: 7: while pt =(cid:48)∩pn{do∀: ∈ }≡
8: CCG[qobs].add(qobs) 8: if W←o q, q P(cid:0)OLY(p(t)) φ th(cid:1)en
9: end for 9: t ←t+δt
10: end if 10: d ←d+δd −
11: end for 11: p(t) ptg.Gen p(t δt),δt,δd,α
12: else
←
a neighboring area is identiﬁed for the node expansion. This 13: d ∞
is described in Algorithm 2. 14: break;
(cid:0) (cid:1)
SQUARE CLIP (Algorithm 2): From the current position 15: end if
of the bot, the ADP grid is identiﬁed and eight neighboring 16: en←d while
ADP grids denoted by C are clipped. Each non-uniform 17: e pcp,pn,α,ptg,d,fˆ(pn),gˆ(pn)
ADP grid ([wli, wui] ∈ CAADDPP), that ha×s at least one obstacle 18: EPTG←+ {e}
present is further divided into (M N) cells known as 19: end for
collision grids (C ), with a resolution of R as shown
CG CG
in Fig. 4b. These ﬁner collision grids are used to optimally position p aretreatedastwopixelsinabinaryimage.These
n
store the transformed obstacle points with respect to pcp of two pixels are connected if there is an ordered sequence of
the bot. The transformed obstacle points are used to check pixels such that any two adjacent pixels in the sequence are
for collision when trajectories are generated (Algorithm 3). neighbors. This is depicted in Fig. 4c. It is possible to ﬁnd
NEXT NODE (Algorithm 1, Line 10): A method inspired an edge between pcp and pn within the free space if they
by connected component labeling scheme in image process- are connected. These edges are further processed and the
×
ing is used to down-size the obstacle points [29]. The 3 3 trajectories are constructed as described in Algorithm 3.
ADPgridsalongwiththecollisiongridsand p areprovided PROC EDGE AND TRAJ (Algorithm 1,Line 11-24)
as inputs to this algorithm. This 3×3 area cisp treated as a For each pn ∈ PN, the cost hˆ(pn) is calculated and the
binary image with 0 for the presence of obstacle and 1 for trajectories are constructed using the set of Parameterized
∈ ← − −
free space. The centroi∈d pn PN of the free space in each Trajectory Generators (PTGs), PTG C PTG∈, A PTG
neighboringADP grid C around p isidentiﬁed. Now as shown in Fig. 5b and 5c. For each ptg PTG, the
ADP cp
twoposes,currentpositionofthebot p andthelocaltarget relative position of the neighboring node p is computed
cp n
Fig. 4: (a) Non-uniform discretization of state space based
on obstacle map known as ADP grids (b) Clipped area Fig. 5: (a) ADP focuses the search to converge optimally
around the start position of the robot that includes 3x3 ADP from p to p (b) Paths generated by circular ptg
start goal
grids. Based on the location of obstacles, ADP grids further to connect the current position with local goals in the
goes through ﬁner discretization (c) Next Node computes neighboring ADP grids. (c) Paths generated by asymptotic
centroids of free spaces in neighboring 8 ADP grids and ptg to connect the current position with local goals in the
assigns them as local targets neighboring ADP grids
458
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:46 UTC from IEEE Xplore.  Restrictions apply. (a) Scenario 1: TP-RRT (b) Scenario 1: ADP (c) Scenario 2: TP-RRT (d) Scenario 2: ADP
Fig.6:ComparisonofnodepointsforRRTandADPinScenario 1andinScenario 2(inSimulationonIntelEdison)
TABLEI:ComparisonofTP-RRTandADPonIntelEdison
−
as, pr=pn −pcp as shown in Algorithm 3. The inverse ptg Scenario 1 Scenario 2
function (ptg 1) returns the trajectory parameter α, which TP-RRT ADP TP-RRT ADP
takes it from pcp to that position. The trajectory generation #Nodesexplored 3572 87 1498 23
begins with the initial values of the pose, distance and #Nodesonthepath 37 22 8 5
time being 0. The trajectory points are generated in the Executiontime(s) 53 2 22 0.5
direction of α, while checking for the collision of the
robot transformation B(p) with Wo at every point. If there wide variety of simulated scenarios. Comparison with other
is a collision, the edge is penalized with a large value variantsofRRTandgraph-basedmethodsisomittedheredue
(cid:0) (cid:1)
and the trajectory generation stops along that α. If the tothequalitativelydifferentnatureoftheobtainedpaths.Fur-
collision free trajectory leads to the desired pn, then the ther, comparison with two-step planning approaches (which
edge details pcp,pn,α,ptg,d,fˆ(pn),gˆ(p{n) are}updated for ﬁrst take the solution from sampling/graph based methods,
the respective eptg and added to the set EPTG . The set is and then incorporate the kinematical constraints through
then sorted according to the distance d and the edge with methods like quadratic programming) is excluded due to the
the lowest d is picked as the shortest edge e. Edge e is inherent overhead observed in such approaches.
updated with the costs fˆ(pn) and gˆ(pn) and is added to the We have evaluated the performance of our algorithm
set of candidate nodesC. Thus the edges e are evaluated for using four challenging scenarios as described below:
all the neighboring nodes and added to C. These candidate Scenario 1: An easy maze-like scenario with structured
nodes are used to build the tree. obstacles in a large w-space. Parameters p(x,y,θ) are:
TREE EXPANSION (Algorithm 1, Line 25 28): The al- pstart =(0,0,0); pgoal =(9,9,0).
gorithmincrementallybuildsatree,τ =(V, E),ofcollision Scenario 2: A highly cluttered scenario with ob-
free trajectories rooted at pstart. At each iteration, edge with stacles that requires driving the robot into a rela-
theleastcost, f(ˆpn),inCispickedasthelowcostedgeelow. tively −narrow−space. Parameters p−(x,y,θ) are: pstart =
The pn corresponding to elow is picked as the next current (1.64, 0.23, 0.17); pgoal =(3.25, 0.25,0).
position{pcp}. The{po}se pcp and the edge elow are added to Scenario 3: A highly cluttered scenario with obstacles
the sets V and E , respectively, as depicted in Fig 5(a). that has relatively lesser headroom in the start position. The
This procedure {is }repeated until the goal position pgoal is start and goal positions are both present in a narrow space
reached or C= φ (i.e, there are no more low cost edges b−etween−the obstacles. Parame−ters p−(x,y,θ) are: pstart =
and the search area is exhausted). ( 5.83, 6.18,1.39); pgoal =( 8.24, 6.63,3.14).
BACK TRACK (Algorithm 1, Line 31): Once the pgoal is Scenario 4: A maze-like scenario where there are nar-
reached, the kinematically-feasible path is recovered by row turns requiring smooth continuous maneuvers of the
backtracking the tree τ = (V, E), from pgoal to pstart, robot.Parameters p(x,y,θ)are: pstart=(0.5,0.5,0); pgoal=
as shown in Fig. 5. This path contains a series of paths (8.5,8.5,0).Notethat,(x,y)areinmetersandθ isinradians.
∈ ∈
points p(t) Cfree for t [0,T], where p(0) = pstart For the Scenarios 1 and 2, TP-RRT and ADP algo-
and p(T) = pgoal. rithms were executed on Intel Edison platform to ﬁnd kine-
matically feasible paths. The maximum map-size considered
IV. EXPERIMENTALRESULTS was (10m×10m). The results have been captured in Table I.
Simulations were conﬁgured considering the applicability When compared to TP-RRT, the ADP algorithm sam-
−
of the ADP algorithm to small form factor Ackermann pled 50 60X lesser number of nodes during its search
driverobotmodelprototypedwithcustomchassis[28].Intel for the optimal path. As observed in Fig. 6a and 6c, the
Edison platform was used to benchmark the performance RRT expansion is random and the nodes are spread in all
of ADP owing to its relevance in on-board, edge-compute possible directions. However, the ADP expansion is guided
systems [30,31]. ADP was compared with TP-RRT on a by a cost function to move towards the goal. As observed
459
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:46 UTC from IEEE Xplore.  Restrictions apply. TABLE II: ADP Silicon Results
Scenarios PathLength(m) Time(ms)
Scenario 3 6.8 4.6
Scenario 4 16.4 13
successful in ﬁnding a path in this scenario. Unlike in TP-
RRT,thenumberofnodesthataresampledduringthesearch
in ADP are very less.
It is clear from the plots in Fig. 8 that the ADP planner
functions efﬁciently and provides an optimal path from the
Fig. 7: Comparison of nodes explored by TP-RRT and ADP startpositiontothetargetpositionconsideringthekinematic
constraintsof therobot.In TableII,the measurementresults
on the ADP hardware are shown for these scenarios. At
nominal operating conditions (0.75V, 100MHz), the ADP
power consumption is 14mW. Note that, although the pro-
posed planner is speciﬁcally focused for small form-factor
robots in 2D, it can be scaled to a wide range of robots and
extended to the 3D world.
V. CONCLUSION
In this paper, an Adaptive Directional Planner (ADP)
algorithm is presented for addressing complex, compute and
memory-intensiverequirementsofautonomousmobilerobot
navigation in unknown and challenging environments. The
Fig.8:Scenario 3andScenario 4withADP(silicon)
algorithm presented utilizes the combination of continuous
space and space discretization approaches resulting in opti-
mal path and quick path convergence. The ADP algorithm
in Fig. 6b and 6d, the nodes in ADP are grown only in
is tested with different challenging scenarios verifying the
the directions which result in kinematically feasible optimal
functionalityandrobustness.Theexperimentalresultsclearly
paths towards the goal position, signiﬁcantly reducing the
demonstrate the superiority of the ADP algorithm compared
number of nodes. Further, the overall runtime with ADP is
− to standard TP-RRT with signiﬁcant improvements in the
40 50X less compared to the TP-RRT, demonstrating the − −
number of nodes (40 60X) and execution time (40
optimal compute utilization.
50X). Further, the hardware implementation (accelerator) of
Next,theresultscomparingthenodesexploredbyTP-RRT
the ADP results in low-power (14mW), low-memory foot-
and ADP are compared for all the four scenarios in simula-
print(28KB)andhigh-performance(>30fps)demonstrating
tion on Intel Edison. In Fig. 7, the overall improvement in
extreme-energy efﬁciency.
the number of nodes observed is plotted. It is seen that the
ADP outperforms TP-RRT with improvement in the orders REFERENCES
−
of 40X 60X, demonstrating the efﬁciency of the proposed
[1] J. J. Craig, Introduction to robotics: mechanics and control, vol. 3.
algorithm. PearsonPrenticeHallUpperSaddleRiver,2005.
The ADP algorithm is implemented in silicon on 22nm [2] S.M.LaValle,“Rapidly-exploringrandomtrees:Anewtoolforpath
planning,”1998.
Intel process node [28]. ADP algorithm is extensively tested
[3] S.LaValle,“PlanningAlgorithms:CambridgeUniversityPress,2006,”
in simulations and on silicon with thousands of test cases. 2006.
For demonstrating the functionality, two challenging silicon [4] S.LaValle,“Motionplanning:roboticsautomationmagazine,”IEEE,
vol.18,no.1,pp.79–89,2011.
test-cases Scenarios 3 and 4 are presented here.
[5] S.KaramanandE.Frazzoli,“Sampling-basedalgorithmsforoptimal
Results corresponding to Scenario 3 are presented in motion planning,” The international journal of robotics research,
Fig. 8a. In Scenario 3, the start position of the bot is vol.30,no.7,pp.846–894,2011.
[6] B. Donald, P. Xavier, J. Canny, J. Canny, J. Reif, and J. Reif,
surrounded by the obstacles in the direction towards the
“Kinodynamicmotionplanning,”JournaloftheACM(JACM),vol.40,
goal position. However, the ADP ﬁnds an optimal way out no.5,pp.1048–1066,1993.
fromthestartpositionandconstantlychangesitsorientation [7] R. M. Murray, A mathematical introduction to robotic manipulation.
CRCpress,2017.
towardsthetargetposition.Evenintheclutteredscenariolike
[8] S. M. LaValle and J. J. Kuffner Jr, “Randomized kinodynamic plan-
this,theefﬁcientsamplingofnodesandtrajectorygeneration ning,” The international journal of robotics research, vol. 20, no. 5,
using ADP are evident. pp.378–400,2001.
[9] L.Kavraki,P.Svestka,andM.H.Overmars,Probabilisticroadmaps
Results corresponding to Scenario 4 are presented forpathplanninginhigh-dimensionalconﬁgurationspaces,vol.1994.
inFig.8b.Thisisalsoamazescenariothatneedstherobotto UnknownPublisher,1994.
[10] D. Hsu, R. Kindel, J.-C. Latombe, and S. Rock, “Randomized kino-
have a particular orientation at the narrow turns to smoothly
dynamic motion planning with moving obstacles,” The International
navigate without losing the momentum. TP-RRT was not JournalofRoboticsResearch,vol.21,no.3,pp.233–255,2002.
460
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:46 UTC from IEEE Xplore.  Restrictions apply. [11] A. H. Qureshi, S. Mumtaz, K. F. Iqbal, Y. Ayaz, M. S. Muhammad,
O.Hasan,W.Y.Kim,andM.Ra,“Triangulargeometrybasedoptimal
motion planning using RRT*-motion planner,” in 2014 IEEE 13th
InternationalWorkshoponAdvancedMotionControl(AMC),pp.380–
385,IEEE,2014.
[12] S. Karaman, M. R. Walter, A. Perez, E. Frazzoli, and S. Teller,
“AnytimemotionplanningusingtheRRT,”in2011IEEEInternational
ConferenceonRoboticsandAutomation,pp.1478–1483,IEEE,2011.
[13] J.D.Gammell,S.S.Srinivasa,andT.D.Barfoot,“InformedRRT*:
Optimalsampling-basedpathplanningfocusedviadirectsamplingof
an admissible ellipsoidal heuristic,” in 2014 IEEE/RSJ International
ConferenceonIntelligentRobotsandSystems,pp.2997–3004,IEEE,
2014.
[14] C. Urmson and R. Simmons, “Approaches for heuristically biasing
RRT growth,” in Proceedings 2003 IEEE/RSJ International Con-
ference on Intelligent Robots and Systems (IROS 2003)(Cat. No.
03CH37453),vol.2,pp.1178–1183,IEEE,2003.
[15] K.Yingying,C.Xiong,andH.Jianda,“BidirectionalVariableProb-
ability RRT Algorithm for Robotic Path Planning,” in Electrical,
Information Engineering and Mechatronics 2011, pp. 1745–1751,
Springer,2012.
[16] J.L.Blanco,M.Bellone,andA.Gimenez-Fernandez,“TP-SpaceRRT
Kinematic Path Planning of Non-Holonomic Any-Shape Vehicles,”
International Journal of Advanced Robotic Systems, vol. 12, no. 5,
p.55,2015.
[17] J.-L.Blanco,J.Gonza´lez,andJ.-A.Ferna´ndez-Madrigal,“Extending
obstacle avoidance methods through multiple parameter-space trans-
formations,”AutonomousRobots,vol.24,no.1,pp.29–48,2008.
[18] J.-L. Blanco, J. Gonzalez, and J.-A. Ferna´ndez-Madrigal, “The Tra-
jectory Parameter Space (TP-Space): a new space representation for
non-holonomic mobile robot reactive navigation,” in 2006 IEEE/RSJ
InternationalConferenceonIntelligentRobotsandSystems,pp.1195–
1200,IEEE,2006.
[19] J.L.B.Claraco,“Contributionstolocalization,mappingandnaviga-
tioninmobilerobotics,”UniversidaddeM’alaga,M’alaga,2009.
[20] J. Blanco, J. Gonza´lez, and J. Ferna´ndez-Madrigal, “Foundations of
parameterized trajectories-based space transformations for obstacle
avoidance,”MotionPlanning,p.23,2008.
[21] S. Upadhyay and A. Ratnoo, “Continuous-curvature path planning
with obstacle avoidance using four parameter logistic curves,” IEEE
RoboticsandAutomationLetters,vol.1,no.2,pp.609–616,2016.
[22] D.Dolgov,S.Thrun,M.Montemerlo,andJ.Diebel,“Pathplanningfor
autonomousvehiclesinunknownsemi-structuredenvironments,”The
International Journal of Robotics Research, vol. 29, no. 5, pp. 485–
501,2010.
[23] S.KaramanandE.Frazzoli,“Optimalkinodynamicmotionplanning
usingincrementalsampling-basedmethods,”in49thIEEEconference
ondecisionandcontrol(CDC),pp.7681–7687,IEEE,2010.
[24] D. J. Webb and J. Van Den Berg, “Kinodynamic RRT*: Asymptot-
ically optimal motion planning for robots with linear dynamics,” in
2013 IEEE International Conference on Robotics and Automation,
pp.5054–5061,IEEE,2013.
[25] E. Schmerling, L. Janson, and M. Pavone, “Optimal sampling-based
motion planning under differential constraints: the driftless case,” in
2015 IEEE International Conference on Robotics and Automation
(ICRA),pp.2368–2375,IEEE,2015.
[26] Y. Li, Z. Littleﬁeld, and K. E. Bekris, “Asymptotically optimal
sampling-basedkinodynamicplanning,”TheInternationalJournalof
RoboticsResearch,vol.35,no.5,pp.528–564,2016.
[27] P. E. Hart, N. J. Nilsson, and B. Raphael, “A formal basis for the
heuristicdeterminationofminimumcostpaths,”IEEEtransactionson
SystemsScienceandCybernetics,vol.4,no.2,pp.100–107,1968.
[28] V.Honkote,D.Kurian,S.Muthukumar,D.Ghosh,S.Yada,K.Jain,
B.Jackson,I.Klotchkov,M.R.Nimmagadda,S.Dattawadkar,etal.,
“A Distributed Autonomous and Collaborative Multi-Robot System
Featuring a Low-Power Robot SoC in 22nm CMOS for Integrated
Battery-Powered Minibots,” in 2019 IEEE International Solid-State
CircuitsConference-(ISSCC),pp.48–50,IEEE,2019.
[29] R.C.GonzalezandR.E.Woods,“Imageprocessing,”Digitalimage
processing,vol.2,p.1,2007.
[30] “Intel edison, one tiny platform, endless possibility.” http://
www.intel.com/content/www/us/en/do-it-yourself/
edison.html. Accessed:2019-09-14.
[31] B.Beavers,“ThestorybehindtheIntelAtomprocessorsuccess,”IEEE
Design&TestofComputers,vol.26,no.2,pp.8–13,2009.
461
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 14:49:46 UTC from IEEE Xplore.  Restrictions apply. 