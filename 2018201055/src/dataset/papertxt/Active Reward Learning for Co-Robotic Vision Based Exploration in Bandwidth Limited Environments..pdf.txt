2020 IEEE International Conference on Robotics and Automation (ICRA)
31 May - 31 August, 2020. Paris, France
Exploiting sparsity in robot trajectory optimization with direct
collocation and geometric algorithms
Daniel Cardona-Ortiz, Alvaro Paz and Gustavo Arechavaleta
Abstract—This paper presents a robot trajectory optimiza- Thus, only the running cost and the system dynamics of
tion formulation that builds upon numerical optimal control the OCP are provided. However, ﬁnite differences methods
and Lie group methods. In particular, the inherent sparsity of
severely affect the computational cost to obtain the solution
direct collocation is carefully analyzed to dramatically reduce
while automatic differentiation turns to be very restrictive
thenumberofﬂoating-pointoperationstogetﬁrst-orderinfor-
mation of the problem. We describe how sparsity exploitation when the system dynamics implies the computation of the
isemployedwithbothnumericalandanalyticaldifferentiation. equationsofmotionofroboticsystemswithmanydegreesof
Furthermore, the use of geometric algorithms based on Lie freedom.Inthisworkweevaluatebothmethodstohighlight
groups and their associated Lie algebras allow to analytically
these inconveniences.
evaluate the state equations and their derivatives with efﬁcient
recursive algorithms. We demonstrate the scalability of the We propose to exploit as much as possible the sparse
proposed formulation with three different articulated robots, structure of the large-scale NLP, but also we introduce
such as a ﬁnger, a mobile manipulator and a humanoid a key ingredient to dramatically reduce the computational
composed of ﬁve, eight and more than twenty degrees of
time to obtain the solution regardless the complexity of
freedom, respectively. The performance of our implementation
robot’s equations of motion. Notably, the use of geometric
inC++isalsovalidatedandcomparedagainstastate-of-the-art
general purpose numerical optimal control solver. algorithmsallowstoevaluatetherobot’sequationsofmotion.
Inthesamespiritof[12],wheretherobot’sinversedynamics
I. INTRODUCTION and the partial derivatives with respect to collocation points
Direct transcription methods in numerical optimal control with B-splines are computed with recursive algorithms, here
have evolved into powerful general purpose solvers capable we apply geometric operators to efﬁciently differentiate
to optimize the trajectories of complex dynamical systems the robot’s forward dynamics. Furthermore, we show how
subjecttoawidevarietyofpathconstraints[1],[2],[3],[4]. the proposed solver extends the applicability of numerical
The solvers [1] and [4] apply direct multiple shooting with optimal control for robot trajectory optimization.
dedicatedsequentialquadraticprograms(SQP).Ontheother
The organization of the paper is as follows. First, Section
hand, the solvers [2] and [3] make use of pseudospectral
II formulates the OCP as well as its discretization to get
collocation combined with interior-point methods or SQP.
the large-scale NLP. Then, Section III describes the recipe
Although part of the success is supported by the maturity
to exploit the sparse structure of the constraint Jacobian.
of nonlinear programming (NLP), the role of transcription
Section IV introduces the analytical differentiation of the
methods is of great importance. They are employed for
robot’s forward dynamics with geometric algorithms. The
converting the original optimal control problem (OCP) into
numerical results are given in Section V with three different
a large-scale NLP [5], [6]. This process strongly impacts
robots. Concluding remarks are given in Section VI.
the size of the underlying NLP in terms of the number of
decision variables, defect constraints to satisfy the system
dynamics and the associated sparsity. II. ROBOTTRAJECTORYOPTIMIZATIONPROBLEM
The aforementioned solvers have demonstrated good re-
sults to generate robotic movements [7], [8]. Recently, other
Let us formulate an optimal control problem (OCP) as
speciﬁc solvers based on direct collocation have been sug-
follows: given an articulated rigid body system with n
gestedforrobotmotionoptimization[9],[10],[11].Ashared (cid:20) (cid:21)
degrees of freedom (DoF) and a state vector
aspect in all these works is the computational method that
is used to obtain ﬁrst-order information of the optimization
q ∈
problem. In particular, the gradient of the cost function and x= IR2n, (1)
q˙
constraint Jacobians of the NLP are commonly computed
with either ﬁnite differences or automatic differentiation.
{ } ∈
Otherwise, dedicated symbolic computation is employed as where q,q˙ IRn are the robot conﬁguration, and joint
suggested in [11]. The main advantage of these methods is velocities,respectively,ﬁndacontrollaw(ifexists)thatleads
that the user does not have to provide how to compute ﬁrst- the system from its initial state to a ﬁnal one by solving the
order information as an input to the optimization problem. following OCP: (cid:90)
AuthorsarewithRoboticsandAdvancedManufacturingGroup,Centro
{ T
deInvestigacio´nydeEstudiosAvanzadosdelIPN,Saltill}o,Coah.Me´xico. minimize w(x(t),u(t),t)dt (2)
daniel.cardona,alvaro.paz,garechav @cinvestav.mx ∈
u(t) U 0
978-1-7281-7395-5/20/$31.00 ©2020 IEEE 469
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 16:05:58 UTC from IEEE Xplore.  Restrictions apply. subject to x˙(t)=f(x(t),u(t),t)
≤
g(x(t),u(t),t) 0
≤ ≤
x x(t) x (3)
lb ub
x(0)=x
i
x(T)=x
f
⊂ ·
where U IRn deﬁnes the admissible control domain, w()
· ∈
standsfortheintegrandoftheLagrangian,g() IRp arethe
path constraints, and the dynam(cid:20)ics o(cid:21)f the robot is expressed
in its state equation form as
q˙(t) ∈
f(x(t),u(t))= IR2n, (4)
q¨(t)
with Fig.1:SparsityoffullconstraintJacobianfora5-DoFrobot
− − with N =5 and nz is the number of non-zero elements.
q¨(t)=H(q(t)) 1(u(t) h(q(t),q˙(t)) (5)
∈ × ∈
where H(q) IRn n denotes the inertia matrix, h(q,q˙)
The overall NLP constraint vector is deﬁned as
IRn contains the non-linear terms, and u is the generalized
∈ ∈ ∈
input torques. The constraint vectors xlb IR2n and xub c(z)=[ΦT γT eT]T IRncns (13)
IR2n are the lower and upper bounds of the states of the
{ }∈ together with bound constraints
system, and x ,x IR2n are the initial and ﬁnal states.
i f ∈
c =[0 0 ... 0 g g ... g x x ] IRncns (14)
A. Direct collocation formulation L L L L i f ∈
c =[0 0 ... 0 g g ... g x x ] IRncns (15)
Among the existing collocation schemes to approximate U U U U i f
the original OCP, where the system dynamics evolves con- where n =(2n+p)N +2n.
cns
tinuously along the entire trajectory, we restrict our focus B. Sparsity of NLP
on a Lobatto method. In particular, the trapezoidal method
In order to solve the problem given in (6) and (7), the
is one of the simplest and computationally less expensive
use of numerical optimization strategies such as sequential
method. However, more sophisticated collocation schemes
quadratic programming or interior-point methods become
such as Runge Kutta [5] and orthogonal methods [13] can
essential. In any case, the Karush-Kuhn-Tucker (KKT) ﬁrst-
be applied. The use of the trapezoidal quadrature allows to
(cid:88) order necessary conditions for optimality must be satisﬁed
convert the problem in (2) and (3) into a NLP of the form
[14]. Thus, the gradient of (6) and the Jacobian of (7)
−
N 1 must be available. In numerical optimal control, it is well
1
minimize h(w +w ) (6) known that the size of the constraint Jacobian is large and
z 2 k k+1
k=0 its structure is sparse [5]. This is mainly due to the number
subject to c ≤c(z)≤c ofdefectconstraints(10)forsatisfyingthesystemdynamics.
L ≤ ≤ U ∀ ∈N (7) In particular, the Jacobian of (7) is deﬁned as
x x x , k  
lb k ub  
− ∂Φ
whereh= tf−t0,N isthenumberofcollocationpointsand ∂z
z ∈IR3nN+2Nco1ntains the NLP decision variables J(z)= ∂c(z) = ∂γ ∈IRnz×ncns (16)
∂z ∂z
z =[t t xT uT xT uT ... xT uT]T (8)
0 f 1 1 2 2 N N ∂e
∂z
Thesystemdynamicsisnowexpressedasasetofcollocation
and the associated sparsit(cid:40)y shaped by (10), (11) and (12)
constraints
fulﬁlls the following conditions
∈ −
Φ=[ϕT1 ϕT2 ... ϕTN−1]T IR2n(N 1) (9) ∂ϕ ∈ × (cid:40)∂ϕi if i=k | i=k+1
i IR2n 3n = ∂zk
with ∂z 0 otherwise
k
− − 1
ϕk =xk+1 xk 2h(fk+1+fk) (10) ∂gi ∈IRp×3n = (cid:40)∂∂zgki if i=k
The path constraints have the form ∂z 0 otherwise
k
∈ |
γ =[g1T g2T ... gNT]T IRpN (11) ∂e ∈IR2n×2n = ∂∂xek if k =0 k =N
∂x 0 otherwise
and x(0) and x(T) are known as event constraints k
∂e ∈ ×
e=[xT0 xTN]T ∈IR4n (12) ∂uk IR2n 2n = 0
470
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 16:05:58 UTC from IEEE Xplore.  Restrictions apply. ∈
wherez =[xT uT]T IR3n.Fig.1illustratesthestructure
k k k
of (16) by considering the state space representation of the
equations of motion of a 5-DoF robotic ﬁnger with N =5.
III. SPARSEJACOBIANEXPLOITATION
We ﬁrst exploit the separability of (10) by rewriting it as
− − 1 − 1
ϕ =[x x ] [hf ] [hf ] (17)
k k+1 k 2 k+1 2 k
It is then possible to express the NLP constraints (13) as
c(z)=Az+By(z) (18)
 
where
 
 −  Fig. 2: Sparsity structure of D by considering the dynamics
02n×2 I 0 −I  of a 5-DoF robotic ﬁnger with N =5.
 I 0 I 
 
A= ... ...
−
0 × I 0 I but,alsowithrespecttothestateandcontrolvariables.Thus,
2n 2
it can be deduce from (4) and (5) that
 
   
∈ × ∂q˙k ∂q˙k 0 I ×
The matrix A ∈IRncn×s (3nN+2) contains cop∈ies of×an ∂hfk = h∂qk ∂q˙k =h n n (22)
iTdheentpitryopmoasetrdixshIapeIRof2nB2∈nIaRnndcnnsu×lNl(m2na+trpic)+es4n0isIR2n n. ∂xk ∂∂qq¨kk ∂∂qq¨˙kk (cid:20) ∂∂qq¨kk(cid:21) ∂∂qq¨˙kk
  ∂q˙k
Iϕ Iϕ  ∂hfk = h ∂uk =h 0 − (23)
B =−1 Iϕ Iϕ ...  ∂uk ∂∂uq¨kk H(qk) 1
2 The computation of the derivatives ∂q¨k, ∂q¨k and ∂q¨k in
Iϕ Iϕ (22)and(23)remainscostlywithsparse∂qnkum∂eqr˙kicaldiff∂eureknti-
I
g ation. Instead, we apply geometric algorithms for multibody
∈ × ∈ × systems to analytically compute (5), (22) and (23) as it is
whereI IRn n andI IR(pN+4n) (pN+4n) areidentity
matricesϕ. The vector yg(z) ∈IRN(2n+p)+4n stacked the explained in the next section.
following terms   IV. GEOMETRICALGORITHMS
f¯ The main feature of geometric algorithms is their simple
y(z)= γ (19) waytodifferentiateexponentialexpressions[16].Ithasbeen
(cid:2) (cid:3)
e possible to differentiate the recursive Recursive Newton-
Euler Algorithm (RNEA) to solve the inverse dynamics
··· ∈
where f¯= hfT hfT hfT hfT T IR2nN problemfortheminimum-effortOCP[12].BasedonRNEA
1 2 3 N
From (18), the constraint Jacobian (16) is rewritten as [17],thecomputationof ∂q¨ hasbeenproposedin[18]where
∂x −
the inverse of the inertia matrix H(q) 1 is used to map
J(z)=A+BD (20) from ∂u to ∂q¨. It is also known that the forward dynamics
∂x ∂x
problem can be solved very efﬁciently by means of the
∈ ×
where D = ∂y(z) IR(N(2n+p)+4n) (3nN+2), and its Articulated-BodyAlgorithm(ABA)withspatialvectors[17].
∂z
structure is visualized in Fig. (2). Note that classical sparse In [19], it is proposed a geometric version to differentiate
matrix computation techniques can be applied to evaluate the ABA with respect to (1). In much the same way, we
(18) and (20). However, in order to numerically calculate D provide a geometric differentiation of the ABA, but we
we adopt the method suggested in [15] that performs sparse explicitly describe how to compute each expression when
ﬁnite differences by efﬁciently grouping nonzero elements. tensor products are involved.
ItisimportanttonotethatthesparsestructureofD given
A. Lie Groups and algebras for robot motion
by its main blocks corresponds to the partial derivatives of
thesystemdynamicswithrespecttotheinitialandﬁnaltime The geometric elements to compute the robot’s equations
ofmotionaredetailedin[20].Herewejustpointoutthatthe
∂hf − f ∂hf f ∈ conﬁguration of a rigid-body and the elements of its tangent
k = −k , k = −k IR2n (21) ∈ ∈
∂t N 1 ∂t N 1 spacearedeﬁnedbyG SE(3)andξ se(3),respectively,
0 f
471
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 16:05:58 UTC from IEEE Xplore.  Restrictions apply. where the Lie group SE(3) contains all possible rigid-body To encapsulate the predecessors inertial effects, two new
motions,andse(3)isitsassociatedLiealgebrathatcontains variables are deﬁned as
motion elements denoted by ξ, e.g. screw s, twist ν and − − (cid:62)
∗ ∈ ∗ Ma = MA U d 1U (35)
spatial acceleration ν˙. On the other hand, ξ se (3) is an i i i i i −
element of the cotangent space acting on the rigid-body, e.g. pai = pAi +Miaci+Uidi 1ui (36)
wrench F and momentum µ. The transformation between Thus, MA and pA in (31) are obtained with a back-
elements of the group and its algebras is expressed by the projection asi i
adjoint operators
∗
MA = M +Ad Ma Ad (37)
− i i Gi i+1 Gi
Ad (ξ) = G[ξ]G 1 (24) ∗ i+1 i+1
Ad∗G(ξ∗) = G[ξ∗]G−1 (25) pAi = pi+AdGii+1pai+1 (38)
G − Finally, the forward dyn(cid:0)amics proble(cid:1)m is reformulated
ad (ξ ) = [ξ ][ξ ] [ξ ][ξ ] (26)
ξ∗1 ∗2 1∗ 2 − 2 ∗1 with the previous expressions as
adξ(ξ ) = [ξ ][ξ] [ξ][ξ ] (27) q¨ =d−1 u −U(cid:62)ν˙a (39)
· i i i i i
where [] is the matrix form of such element [20].
where ν˙a is a partial expression for the acceleration, then
For robots composed by articulated rigid bodies, the local i
transformation between their reference frames attached to ν˙a =Ad − ν˙ − +c (40)
i Gi 1 i 1 i
them is computed as i
Once(39)and(40)arecomputed,theaccelerationν˙ should
i
Gii−1(qi) = Gii−1(0)e[si]qi (28) be updated by means of ν˙i =ν˙ia+siq¨i.
C. Differentiating the forward dynamics
where i is the body frame, e[si]qi is the matrix exponential
∈ Toobtain ∂q¨,thederivativesoftheAdjointoperatorsmust
map, si se(3) is the i-th screw axis of motion expressed be computed∂(xthe details are in Appendix A of [12]) as
in its local reference frame, and Gi− (0) is the local trans-
fcoarlTmcuhaletaitowendreafnrtcorhmobFtohte’∈schosonemt∗r(oe3llp)eodasctEutiurnelge.ri-oPn1oiancraigre´ide-qbuoadtyiocna[n21b]e: ∂A∂dA∗G∂d−x−G1ξ1ξ∗ == AAdd−G∗−1∂∂xξ∂ξ−∗ +adAsAd∗d−G−1ξad∂∂∗−xq ξ∗∂q ((4412))
∂x G 1 ∂x G 1 s ∂x
First, lets differentiate the twist (32) as follows
− ∗
F =Mν˙ ad (µ) (29) −
where ν ∈ se(3) and ν˙ ∈ se(3) aνre the twist and its time ∂∂νxi =AdGii−1∂ν∂ix−1 adsiνi∂∂qxi +si∂∂qx˙i (43∈)
derivative while M ∈IR6×6 and µ=Mν ∈se∗(3) are the sinc×ethescrews∈i isc×onstantandadξξ =0.Notet∈hat ∂∂qx×i
rigid-body inertia matrix and its momentum, respectively. IR1 2n and ∂q˙i IR1 2n are the i-th rows of ∂q IRn 2n
∈ ∂×x ∂x
Also, the adjoint operators establish a transformation be- and ∂q˙ IRn 2n, respecti(cid:16)vely. (cid:17)
∂x
Also, the expressions (33) are differentiated as
tween the Lie group and its algebra via the exponentials
−
Ad = eadξq : se(3)→SE(3) (30) ∂∂cxi = adsi ∂∂νxiq˙i+νi∂∂qx˙i (44)
e[ξ]q − ∗ ⊗ − ∗
where e[ξ]q ∈SE(3), ξ ∈se(3) and q ∈IR. ∂∂pxi = ad∂νi Miνi adνiMi∂∂νxi (45)
∂x
and the variables U , d and u from (34) as follows
B. Forward dynamics i i i
⊗
Let us rewrite the ABA in terms of geometric elements. ∂∂Uxi = ∂(cid:62)M∂xiA si (46)
As the main objective is to obtain an equation of the form ∂di = s ∂Ui (47)
∂x i ∂x
F =MAν˙ +pA (31) ∂∂uxi = ∂∂τxi −s(cid:62)i ∂∂pxAi (48)
i i i i
where MA and pA are the cumulative inertia and wrench where ⊗ is the tensor produc−t si∈nce ∂M∂xiA ∈IR6×6×2n.
i i The partial derivative of d 1 IR is computed as
bias, respectively, the next auxiliary variables should be i
deﬁned ∂d−i1 =−d−2∂di =−d−2s(cid:62)∂Ui (49)
∂x i ∂x i i ∂x
ν = Ad − ν− +s q˙ (32) Now, the variables Ma from (35) and pa from (36) can
i Gii 1 i 1 i i − ∗ (cid:0) (cid:1) be differentiated with muiltidimensional calciulus as
c = ad s q˙ and p = ad M ν (33)
whWereeaAlsdoGidii−eﬁ1niestthheeνivAairdijaiobilnetsmUaip,daiinadndGuii−i1νfoi=rthiGeiiia−ss1em−1b.ly ∂∂Mxia = −∂M∂UxiAiU−i(cid:62)∂⊗∂Uxi∂∂d⊗x−i1d−i−1UUii(cid:62)d−i 1⊗ ∂∂Uxi(cid:62) (50)
method [17] as follows ∂∂pxai = ∂∂pxAi + ∂∂Mxia ⊗ci+Mia∂∂cxi +Uid−i 1∂∂uxi
Ui =MiAsi; di =s(cid:62)i Ui; ui =τi−s(cid:62)i pAi (34) +∂∂Uxid−i 1ui+Uiui∂∂dx−i1 (51)
472
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 16:05:58 UTC from IEEE Xplore.  Restrictions apply. Numerical Analytical
By applying (41) and (42) into (37) and (38) we get
PSOPT STOPT STOPT
(cid:16) (cid:17)
∂M∂xiA = Ad∗Gii+1 ⊗ ∂M∂xia(cid:16)+1 ⊗AdGii+1 (cid:17)(52) 36N00 I2t-e3r T1im58-e7.[5s] I77te04r T27i4m76.6.e014[1s6] I67te56r T27im07..53e70[36s]
∗ ∗ − ⊗
+Ad ad− Ma Ma ad Ad ∂qi+1 90 - - 78 522.022 66 135.07
Gii+1 si+1 i+1 i+1 si+1 Gii+1 ∂x
∂pAi = ∂pi +Ad∗ ad∗− pa ∂qi+1 + ∂pai+1 (53) TABLE I: PSOPT comparison
∂x ∂x Gii+1 si+1 i+1 ∂x ∂x
Our last objective is to differentiate the equation (39). For
this,weﬁrstdifferentiatethevariableν˙afrom(40)asfollows
i
−
∂∂ν˙xia =AdGii−1∂ν∂˙ix−1 adsiAdGii−1ν˙i−1∂∂qxi + ∂∂cxi (54)
At this point we hav(cid:16)e all the elements to obta(cid:17)in ∂q¨i by
∂x
means of differentiating (39) as
∂q¨i = d−1 ∂u(cid:0)i −ν˙a(cid:62)∂Ui(cid:1)−U(cid:62)∂ν˙ia
∂x i ∂x i ∂x i ∂x
+∂∂dx−i1 ui−Ui(cid:62)ν˙ia (55) (a) 5-DoF ﬁnger-like robot (b) Kuka Youbot
Fig.3:Roboticplatformsusedforthenumericalsimulations
The acceleration differentiation is also updated with
∂∂νx˙i = ∂∂ν˙xia +si∂∂q¨xi (56)
B. Numerical versus analytical Jacobian computation
Recursively solving the last expressions in three loops,
similar to ABA, ∂q¨ can be retrieved, and plugged in (22). In order to demonstrate the performance and scalability
∂x of our proposal, a set of trajectory optimization problems
Finally, the computation of (23) is performed as suggested
withdifferentnumberofcollocationpointsweresolvedusing
in [22], but with geometric operators in our implementation.
geometric algorithms for evaluating the analytical Jacobian
and sparse ﬁnite differences for estimating the numerical
V. SIMULATIONRESULTS Jacobian. For all the cases, the OCP was solved with
(cid:107) − (cid:107)
Here, we validate the performance of our sparse trape- w(x ,u ,t )= q q 2, (58)
k k k k+1 k
zoidal optimization (STOPT). First, a comparison with an
state-of-the-art numerical optimal control solver is per- and an initial solution deﬁned by the linear interpolation
formed. Then, a comparison between the sparse ﬁnite dif- between the initial and ﬁnal states.
ference method versus geometric algorithms for computing 1) Finger-like robot with 5 DoF: : The state equations
the analytical Jacobian of the constraints.
of the ﬁrst trajectory optimization problem corresponded to
The numerical simulations were performed on a laptop the robot in Figure 3a). This robot has 10 elements in the
computer with an Intel Core i7-6500U processor and 8GB state, i.e., 5 for joint positions and 5 for joint velocities, and
RAM. The implementation of STOPT has been written in 5 control inputs.
C++ language together with the Eigen library and its sparse As a ﬁrst test, single evaluations of the numerical and
algebra module. We use Ipopt to solve the large-scale NLP. analytical Jacobians were performed to show the impact
in the computational time when the number of collocation
A. Comparison with PSOPT [2]
points increased.
Theproblemtobesolvedisgivenbyminimun-effortOCP
with N nvar ncns nz Numerical Analytical
(cid:107) (cid:107) 30 452 311 4952 0.84s 0.094s
w(xk,uk,tk)= uk 2, (57) 60 902 611 10052 2.95s 0.2s
90 1352 911 15152 5.357s 0.28s
foraﬁnger-likerobotwith5DoF(Figure3a).Itturnsoutthat
TABLEII:ComputationaltimetoevaluateasingleJacobian
the automatic differentiation method used in PSOPT does
not support the description of complex equations of motion withtheﬁnger-likerobot.nvar,ncns andnz arethenumber
of decision variables, constraints and non-zero elements in
in a single analytical expression. Thus, the comparison was
the sparse constraint Jacobian, respectively.
performed between the numerical differentiation method in
PSOPT with the numerical and analytical differentiation
methods in STOPT. In particular, the results of every evalu- The advantages to compute the analytical Jacobian with
ationareshowninTABLEI.ItcanbeobservedthatPSOPT recursivegeometricalgorithmsbecameevidentbyobserving
could not solve the OCP with 60 and 90 collocation points. the results presented in TABLE III.
473
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 16:05:58 UTC from IEEE Xplore.  Restrictions apply. NumericalJacobian AnalyticalJacobian
N Iters Eval Time[s] Iters Eval Time[s]
30 55 56 63.646 65 66 23.153
60 40 41 143.456 40 41 47.936
90 29 30 215.492 29 30 71.037
TABLEIII:Trajectoryoptimizationwiththeﬁnger-likerobot
2) Mobile manipulator with 8 DoF: The state equations
werenowevaluatedwiththeKUKAyouBot(seeFigure3b).
The OCP considered 8 control inputs for each joint, and
Fig. 4: Trajectory optimization problem to generate NAO
16 elements for the state. As before the results of the time
postures
requiredofasingleevaluationoftheJacobianwithdifferent
number of collocation points are presented in TABLE IV.
It is remarkable how the computational time to evaluate the NumericalJacobian AnalyticJacobian
N Iters Eval Time[s] Iters Eval Time[s]
numerical derivatives increased, while the analytical deriva-
30 161 162 6314.451 232 233 826.657
tives with geometric algorithms still required less than one 60 164 165 21805.806 161 162 1719.301
second regardless the dimension of the problem. As it can 90 92 93 25783.971 91 92 1957.938
be seen in TABLE V more NLP iterations and evaluations TABLE VII: Numerical results of the ﬁrst trajectory opti-
of the Jacobian were required which caused that the time mization problem with the NAO robot
needed for the Jacobian computation determined the time
for solving the whole optimization problem.
NumericalJacobian AnalyticJacobian
N Iters Eval Time[s] Iters Eval Time[s]
N nvar ncns nz Numerical Analytical 30 229 230 8910.613 207 208 756.602
30 722 497 11924 2.479 0.02 60 212 213 28215.852 225 226 2395.359
60 1442 977 24224 7.698 0.431 90 85 86 23934.295 73 74 1553.155
90 2162 1457 36524 16.09 0.624
TABLE VIII: Numerical results of the second trajectory
TABLEIV:ComputationaltimetoevaluateasingleJacobian optimization problem with the NAO robot
with KUKA youBot
As it is observed in TABLES VII and VIII, the use of a
NumericalJacobian AnalyticalJacobian sparse ﬁnite difference method for estimating the constraint
N Iters Eval Time[s] Iters Eval Time[s]
Jacobian was inefﬁcient, which had a direct consequence in
30 368 369 1160.837 391 392 272.948
60 243 244 2236.503 148 149 318.436 the overall time to solve the large-scale NLP. However, the
90 150 151 2752.326 133 134 567.598 use of the analytic Jacobian with the proposed geometric
differentiation of ABA and the sparsity exploitation of the
TABLE V: Trajectory optimization with KUKA youBot
constraint Jacobian with trapezoidal collocation, saved huge
amounts of time in ﬁnding solutions.
3) Humanoid robot with 24 DoF: We asked STOPT to
solve the trajectory optimization problem with a humanoid
VI. CONCLUSION
robotNAO.Clearly,theOCPbecamehardertobesolvedand
Wepresentedanefﬁcientmethodthatreducesthetimefor
requiredmoretime.Inordertodemonstratetheperformance
the computation of the Jacobian of the constraints required
of our proposal, the state equations considered 48 elements
for solving a trajectory optimization problem, this reduction
in the state vector and 24 control inputs.
impacts in a large scale the computation time required to
AsitisseeninTABLEVI,theevaluationofthenumerical
ﬁnd a solution. In this proposal we take advantage of the
Jacobian with sparse ﬁnite differences was expensive. How-
separability and the sparsity of the trapezoidal collocation
ever,theevaluationoftheanalyticalJacobianwithgeometric
methodinordertoreachasparseblockstructurewhereeach
algorithms just required a few seconds.
part of the Jacobian can be easily identiﬁed and computed
N nvar ncns nz Numerical Analytical in an analytical way, in this case we suggest the use of the
30 2162 1489 105890 38.624 1.148 geometric algorithms in order to compute the most complex
60 4332 2929 215330 131.532 3.02 derivativesi.e.theequationofmotionsw.r.ttothestatesand
90 6482 4369 324770 277.247 4.8
controls.Inordertoprobetheefﬁciencyandscalabiltyofour
TABLEVI:ComputationaltimetoevaluateasingleJacobian method a set of experiments with different robotic platforms
with a NAO robot are perform and different number of collocation point are
performed. For seek of comparison a Here is easy to see
The problem consists of reaching two different postures thattheuseofthesuggestedanalyticalJacobiancomputation
where dynamically feasible whole body motions were per- saves a lot of computation time, allowing to ﬁnd a solution
formed. These postures are shown in Figure 4. of a complex humanoid robot in less than 30 minutes.
474
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 16:05:58 UTC from IEEE Xplore.  Restrictions apply. REFERENCES
[1] Boris Houska, Hans Joachim Ferreau, and Moritz Diehl. Acado
toolkitan open-source framework for automatic control and dynamic
optimization. OptimalControlApplicationsandMethods,32(3):298–
312,2011.
[2] Victor M Becerra. Solving complex optimal control problems at no
costwithpsopt.In2010IEEEInternationalSymposiumonComputer-
AidedControlSystemDesign,pages1391–1396.IEEE,2010.
[3] Yunus M Agamawi and Anil V Rao. Cgpops: A c++ software
for solving multiple-phase optimal control problems using adaptive
gaussian quadrature collocation and sparse nonlinear programming.
arXivpreprintarXiv:1905.11898,2019.
[4] Daniel B Leineweber, Andreas Scha¨fer, Hans Georg Bock, and Jo-
hannes P Schlo¨der. An efﬁcient multiple shooting based reduced
sqp strategy for large-scale dynamic process optimization: Part ii:
softwareaspectsandapplications.Computers&chemicalengineering,
27(2):167–174,2003.
[5] J.-T. Betts. Practical Methods for Optimal Control and Estimation
Using Nonlinear Programming. Advances in Design and Control.
SIAM,2ndedition,2010.
[6] Anil V Rao. A survey of numerical methods for optimal control.
AdvancesintheAstronauticalSciences,135(1):497–528,2009.
[7] Mathieu Geisert and Nicolas Mansard. Trajectory generation for
quadrotor based systems using numerical optimal control. In 2016
IEEE international conference on robotics and automation (ICRA),
pages2958–2964.IEEE,2016.
[8] AnnaLenaEmondsNe´eKleesattelandKatjaMombaur. Inverseopti-
malcontrolbasedenhancementofsprintingmotionanalysiswithand
without running-speciﬁc prostheses. In 2018 7th IEEE International
Conference on Biomedical Robotics and Biomechatronics (Biorob),
pages556–562.IEEE,2018.
[9] MatthewKelly. Anintroductiontotrajectoryoptimization:howtodo
yourowndirectcollocation. SIAMReview,59(4):849–904,2017.
[10] Michael Posa, Cecilia Cantu, and Russ Tedrake. A direct method
for trajectory optimization of rigid bodies through contact. The
InternationalJournalofRoboticsResearch,33(1):69–81,2014.
[11] AyongaHereid,ChristianMHubicki,EricACousineau,andAaronD
Ames.Dynamichumanoidlocomotion:Ascalableformulationforhzd
gait optimization. IEEE Transactions on Robotics, 34(2):370–387,
2018.
[12] Alvaro Paz and Gustavo Arechavaleta. Practical guide to solve the
minimum-effortproblemwithgeometricalgorithmsandb-splines. In
2019 International Conference on Robotics and Automation (ICRA),
pages6720–6726.IEEE,2019.
[13] MichaelAPattersonandAnilVRao.Exploitingsparsityindirectcol-
locationpseudospectralmethodsforsolvingoptimalcontrolproblems.
JournalofSpacecraftandRockets,49(2):354–377,2012.
[14] J.NocedalandS.-J.Wright.NumericalOptimization.Springer-Verlag,
1999.
[15] AlanRCurtis,MichaelJDPowell,andJohnKReid.Ontheestimation
ofsparsejacobianmatrices.J.Inst.Math.Appl,13(1):117–120,1974.
[16] Frank C Park, Beobkyoon Kim, Cheongjae Jang, and Jisoo Hong.
Geometricalgorithmsforrobotdynamics:Atutorialreview. Applied
MechanicsReviews,70(1):010803,2018.
[17] R.Featherstone. RigidBodyDynamicsAlgorigthms. Springer-Verlag,
NewYork,2008.
[18] JustinCarpentierandNicolasMansard.Analyticalderivativesofrigid
body dynamics algorithms. In Robotics: Science and Systems (RSS
2018),2018.
[19] GarettASohlandJamesEBobrow. Arecursivemultibodydynamics
and sensitivity algorithm for branched kinematic chains. Journal of
DynamicSystems,Measurement,andControl,123(3):391–399,2001.
[20] F.-C. Park, J.-E. Bobrow, and S.-R. Ploen. A lie group formulation
of robot dynamics. The International Journal of Robotics Research,
14(6):609–618,1995.
[21] Jerrold E Marsden and Tudor S Ratiu. Introduction to mechanics
and symmetry: a basic exposition of classical mechanical systems,
volume17. SpringerScience&BusinessMedia,2013.
[22] JustinCarpentier. Analyticalinverseofthejointspaceinertiamatrix.
Technicalreport,LaboratoiredAnalyseetdArchitecturedesSystemes,
URLhttps://hal.laas.fr/hal-01790934,2018.
475
Authorized licensed use limited to: UNIVERSITY OF ROCHESTER. Downloaded on September 20,2020 at 16:05:58 UTC from IEEE Xplore.  Restrictions apply. 