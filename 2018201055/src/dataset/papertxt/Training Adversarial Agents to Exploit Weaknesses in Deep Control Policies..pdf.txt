2020 IEEE International Conference on Robotics and Automation (ICRA)
31 May - 31 August, 2020. Paris, France
Advanced BIT* (ABIT*):
Sampling-Based Planning with Advanced Graph-Search Techniques
Marlin P. Strub1 and Jonathan D. Gammell1
Abstract—Path planning is an active area of research es-
sential for many applications in robotics. Popular techniques
include graph-based searches and sampling-based planners.
These approaches are powerful but have limitations.
This paper continues work to combine their strengths and
mitigate their limitations using a uniﬁed planning paradigm.
It does this by viewing the path planning problem as the two
subproblems of search and approximation and using advanced
graph-search techniques on a sampling-based approximation.
This perspective leads to Advanced BIT*. ABIT* combines
truncated anytime graph-based searches, such as ATD*, with
anytime almost-surely asymptotically optimal sampling-based
planners, such as RRT*. This allows it to quickly ﬁnd initial
Fig. 1: ABIT* on NASA/JPL-Caltech’s Axel Rover System [8] during a
solutionsandthenconvergetowardstheoptimuminananytime week-longﬁeldtestintheMojaveDesert,California,USA(SectionV-B).
manner. ABIT* outperforms existing single-query, sampling-
based planners on the tested problems in R4 and R8, and was These graph-based algorithms cannot be applied directly
demonstratedonreal-worldproblemswithNASA/JPL-Caltech.
to planning problems with continuously valued state spaces
I. INTRODUCTION and selecting appropriate a priori discretizations is difﬁcult.
Popular path planning algorithms in robotics include Coarseresolutionsarecomputationallyinexpensivetosearch
graph-based searches, such as A∗ [1] and Dijkstra’s [2], and but may yield paths of poor quality in a continuous context.
sampling-basedplanners,suchasRapidly-exploringRandom Fineresolutionscontainpathsofhigherquality[9]buttheas-
Trees (RRT) [3] and Probabilistic Roadmaps (PRM) [4]. sociatedcomputationalcostbecomesprohibitivelyexpensive
Both graph- and sampling-based approaches have charac- in high dimensions (i.e., the curse of dimensionality [10]).
teristic strengths and limitations. Previous work [5, 6] has Sampling-based planners sample states incrementally to
separated search and approximation in single-query, almost- avoid picking a resolution a priori. Single-query planners
surely asymptotically optimal sampling-based planning to such as RRT simultaneously build and search an anytime
combine their strengths and mitigate their limitations. This approximation that improves with computational time. This
separation can be leveraged to use advanced graph-based incremental sampling makes the search dependent on the
search techniques on an anytime sampling-based approxi- sampling order and results in a randomly ordered search.
mation to further improve performance. Ordering the search of an incremental planner in a
An important strength of graph-based approaches is their solution-orientedmannerrequireseitherorderingtheapprox-
strong theoretical guarantees. A* is resolution-optimal (and imation or separating the search from the approximation.
resolution-complete)aswellasoptimallyefﬁcient.Anyother Batch Informed Trees (BIT*) [5, 6] achieves the second by
algorithm guaranteed to ﬁnd the optimal solution must sampling batches of states and viewing them as an increas-
expand at least as many vertices as A*, given the same ingly dense implicit random geometric graph (RGG) [11].
problem information [1]. This efﬁciency is achieved by BIT*usesincrementalsearchtechniques,similartoLifelong
alwaysexpandingthestatewiththehighestpotentialsolution Planning A* (LPA*) [12], to process the sampled states in
quality but requires an ordering of the search that does not order of potential solution quality.
provide any solutions until the optimum is found. ThispaperextendsBIT*tofurtherleveragetheseparation
Anytimegraph-searchalgorithmssacriﬁcetheefﬁciencyof of search and approximation in sampling-based planning.
A* to ﬁnd intermediate solutions faster. Anytime Repairing Advanced BIT* (ABIT*) uses advanced graph-search tech-
A* (ARA*) [7] ﬁnds an initial, potentially suboptimal so- niques,suchasinﬂationandtruncation,tobalanceexploring
lution quickly and then uses any remaining computational and exploiting an increasingly dense RGG approximation.
time to improve it. ARA* does this without duplicated ABIT* is almost-surely asymptotically optimal and out-
search effort by starting with a heuristic that is inﬂated and performs existing single-query, almost-surely asymptotically
then gradually decreasing this inﬂation while accounting for optimal planners on random and artiﬁcially designed prob-
changes to state connections (i.e., inconsistent vertices). lems, especially in high dimensions. The beneﬁts of ABIT*
wereshownonreal-worldproblemsonNASA/JPL-Caltech’s
1M. P. Strub and J. D. Gammell are with the Estimation, Search, and
Axel (Fig. 1) during a week-long ﬁeld test in the Mojave
Planning(ESP)GroupoftheOxfordRoboticsInstitute(ORI),Universityof
Oxford,UnitedKingdom.(mstrub|gammell)@robots.ox.ac.uk Deserttestingautonomousnavigationonchallengingterrain.
978-1-7281-7395-5/20/$31.00 ©2020 IEEE 130
Authorized licensed use limited to: University of New South Wales. Downloaded on September 20,2020 at 10:51:41 UTC from IEEE Xplore.  Restrictions apply. II. BACKGROUND BIT* samples multiple batches of states and views the re-
sultingapproximationasanincreasinglydenseedge-implicit
Multiqueryalgorithms,suchasPRMandPRM*[13],sep-
RGG. It performs a search ordered on the potential solution
arate the approximation and the search in two phases. These
qualityoftheimplicitedgesofthisgraph.Itefﬁcientlyreuses
algorithmsﬁrstsampletheentirecollision-freestatespaceto
previous search efforts by incorporating techniques from
approximate it with a graph which is then searched to solve
incrementalgraph-searchapproaches,similartoLPA*.BIT*
individual problems. This approximation is computationally
is anytime but uses a nonanytime graph-search that only
expensive but justiﬁed by its reuse.
returns a single solution per approximation. This exploits
Lazy-PRM[14]reducestheapproximationcostbyinitially
thecurrentapproximationwithoutconsideringthatitwillbe
assuming that all vertices and edges are collision-free. A
updatedoncethesearchisﬁnished,whichmaybeinefﬁcient.
planning problem is then solved by searching this graph
Fast-BIT* [23] is a variation of BIT* that ﬁnds initial
and checking the resulting path for collisions. If it contains
solutions faster by ordering the initial search solely on cost-
collisions then the corresponding vertices and edges are
to-go. Once a solution is found, it reorders its queues with
removed and a new search is started on the updated graph.
a full-solution heuristic and reprocesses all vertices. This
Single-query problems only require an approximation of
maintains almost-sure asymptotic optimality but duplicates
the state space relevant to the query. Expansive Space Trees
previous search effort unnecessarily. Fast-BIT* then per-
(EST) [15] avoids approximating the entire state space by
forms the same incremental search as BIT* to fully exploit
incrementally growing trees from the start and goal. This
each subsequent approximation.
focuses the approximation to the relevant region of the state
Unlike the multiquery planners, ABIT* builds a problem-
space but couples the search with the approximation and
speciﬁc approximation of the state space. Unlike EST and
results in a randomly ordered search.
the RRT-based approaches, ABIT* separates approximation
RRT grows a single tree from the start to incrementally and search in a way that allows it to process states in order
approximate the state space. It rapidly expands this tree by of (inﬂated) potential solution cost. Unlike FMT*, ABIT*
biasing its growth towards unexplored regions of the space improves its approximation in an anytime fashion. Unlike
(i.e., with Voronoi bias). The approximation and search are BIT* and Fast-BIT*, ABIT* avoids wasting computational
still coupled by the incremental sampling which also results effort to ﬁnd a resolution-optimal path in an inaccurate
in a randomly ordered search. approximation that will change.
RRT-Connect[16]growstreesfromthestartandgoaland
biases their growth both towards the unexplored space and III. ADVANCEDBATCHINFORMEDTREES(ABIT*)
each other. The greedy tree connection often results in fast BIT* is an anytime, single-query planner that almost-
initial solution times but the search of the unexplored space surelyasymptoticallyﬁndsanoptimalsolutiontoa(continu-
remains randomly ordered by the incremental sampling. ouslyvalued)planningproblem.Itfocusesitsapproximation
These algorithms provide no solution quality guarantee. of the state space to the region that can improve the current
RRT* [13] extends RRT to provide almost-surely asymp- solutionusinginformedsampling[17].Thisapproximationis
totically optimal solutions. Its solutions converge to the separated from the search by sampling batches of states and
optimum with probability one given inﬁnite computational viewing them as an increasingly dense edge-implicit RGG.
time by locally rewiring the tree to ensure locally optimal This perspective enables BIT* to perform a series of
connections. This search for the optimal local connection is informed graph-searches in which RGG edges are processed
performed immediately after each new state is sampled and inorderoftheirpotentialsolutionquality.Thisisachievedby
the global search of the state space remains random. sorting an edge queue according to the sum of the current
Improving the convergence rate of RRT* is an active area cost-to-come from the start to the edge’s parent state, an
of research. Informed RRT* [17] and RRT*-Smart [18] are estimate of the edge cost, and an estimate of the cost-to-
based on different sampling strategies. RRT# [19] modiﬁes go from the edge’s child state to a goal. BIT* performs
the rewiring procedure to ensure globally optimal connec- these searches efﬁciently by reusing information from both
tions. Lower Bound Tree-RRT (LBT-RRT) [20] is a near- previous searches and approximations similar to incremental
optimal variant that allows for continuous interpolation be- search algorithms, e.g. LPA*. Full details are in [6, 24].
tween RRT and RRT* by maintaining a tree which stores BIT*’s separation of approximation and search provides
a lower bound on the cost-to-come to all vertices. These a direction for better single-query, almost-surely asymptoti-
extensions modify how states are used but still process them callyoptimalplanningalgorithms.ABIT*buildsonthissep-
individuallyandmaintain therandomsearchorder ofRRT*. aration by using more advanced graph-search techniques. It
Approximationandsearchcanbeseparatedbyprocessing accelerates anytime performance without duplicating search
batches of multiple states. Fast Marching Tree (FMT*) [21] effort, similar to anytime repairing graph-search algorithms,
samples a user-speciﬁed number of states and uses a Fast and avoids wasting effort to ﬁnd the resolution-optimal
Marching Method [22] to grow a tree that connects them solution in an approximation that will change, similar to
in order of increasing cost-to-come. FMT* is not anytime truncated incremental graph-search algorithms.
and must be restarted from scratch if no suitable solution is This accelerated performance is achieved by inﬂating the
found with the speciﬁed number of samples. cost-to-go estimate in ABIT*’s edge queue. This sacriﬁces
131
Authorized licensed use limited to: University of New South Wales. Downloaded on September 20,2020 at 10:51:41 UTC from IEEE Xplore.  Restrictions apply. ∗
resolution-optimalitybutachievesfasterinitialsolutiontimes Algorithm 1: ABIT (xstart,Xgoal,m)
compared to the incremental search used by BIT*. ABIT*’s ←{ } ←∅ T ← ←
1 V←| x|star|t ;E ; | (V,E←);∞Xunconne←cted∞ Xgoal
initial (potentially suboptimal) solution is subsequently re- 2 q V←+∅Xunconnected ←;εin∅ﬂ ;εtrunc
paired without duplicating search effort by tracking incon- 3 VQcl←osed ;Vin{consist}entT ∞
sistent states, similar to ARA*. A state is considered incon- 45 repeatexpa(cid:0)nd( xstart , ,Xuncon(cid:1)nected, )
sistent if its cost-to-come has decreased since its outgoing 6 ifissearchmarkedfinished()
edges were last inserted into the queue. 7 ifupdateTapproximatio(cid:0)n(εinﬂ,εt(cid:1)runc)
Fully exploiting every RGG approximation by ﬁnding the 8 prune ,Xu←nconnected,Xgoal
resolution-optimalpathiscomputationallyexpensive.ABIT* 9 X←unc|onn|ect|ed + sample| m,Xgoal
10 qQ←V + Xun{connect}edT
avoidsthisbytruncatingitssearchassoonasitcanguarantee 11 expand( xstart , ,Xunconnected,r(q))
that it has found a solution whose cost is within a factor of 12 else
Q← T
theresolution-optimalcost.ThisallowsABIT*tobalancethe 13 +←expand(Vinconsistent, ,Xunconnected,r(q))
exploitation of its approximation (i.e., repairing the search) 14 εinﬂ ←updateinflationfactor()
with the exploration of the state space (i.e., increasing the 1156 εVtcrluonsecd←u∅p;dVaitnceontsrisut(cid:110)enncta←ti∅onfactor() (cid:111)
density of the approximation). 17 marksearchunfinished() (cid:98) (cid:98)
18 else
←
A. Notation 19 (xp,xc) argmin gT(xi)+c(xi,xj)+εinﬂh(xj)
(xi,xj)∈Q
The state space of the planning problem is denoted by Q←−
∈ 20 (xp,x∈c)
XX, the⊂staXrt. sTtahtee cbuyrrexnsttarstearchXi,s asntodretdheasgoaaltrsetea,teTs b=y 2212 ifif(xxpc,∈xcV)closEed
(Vg,oEal), with vertices, V, and edges, E ⊂ V ×V. Vertices 23 Vinconsistent←+ xc
24 else
in the tree are associated with valid states and edges in Q← { } T
the tree represent valid connections between states. An edge 25 + ex←pa(cid:16)nd( xc , (cid:98),Xunconnect(cid:98)ed,r((cid:17)q))
cdoennsoitsetdsaosf(axp,axren)t.Tsthaetes,extpo,fainncdonasicshteilndtssttaattee,sxisc,deannodteids 2276 elsVecliofsεetdru+ncx(cid:98)gcT(xp)+c(x(cid:98)p,xc)+h(xc) ≤min{gT(x)}
buyp tVhiencsoe∞ntsisXteunpntcoanncndectthede.states(cid:98)that are not in the tree make 2289 ififggTT(x(xpp))++cc(x(xpp,,xxcc))<+ghT((xxcc))<x∈mXignoa{lgT(xx∈)}Xgoal
wadimLtheistisnRibﬁ≥lne0itedys.etnimTohtaeetethf(uei.neuc.n,tiiaoonnloowgfe:arXlblonuo→nndn)eRgoaf∞≥tti0vheerrecepoarslet-snteoun-mtcsobmearnes 333012 ififEgxT←c−(x∈p{V)(x+prce(vx,px,cx)c∈)<E}gT(xc)
∈ → ∞ 33 else
frreopmrestehnetsstathrtetcooasts-ttaot-ec,oxme fXro.mThtheefustnacrttiotonagTst:atXe, x∈RX≥0, 34 Xu←nconnected←− xc
through the curre(cid:98)nt search tree, T. This cost is taken to be 35 V + xc
←
inﬁnite for any state with no associated vertex in the tree. 36 E +∈(xp,xc)
(cid:98)The function h: X → R∞≥ represents an admissible 37 ifxc Vclosed←
estima→teof∞thecost-to-gofroma0statetoagoal.Thefunction 3398 elVsienconsistent + xc
f: X R≥0(cid:98)represe(cid:98)nts an a(cid:98)dmissible estimate of the cost 40 Q←+ expand({xc},T,Xunconnected,r(q))
of a path from the start to a goal constrained to go through 41 Vclosed←+ xc
a state, e.g., f(x)..=(cid:98)g(x)+h(x). This estimate deﬁnes the
inf(cid:98)ormed set of states that could provide a better solution, 42 elsemarksearchfinished()
X ..= {x ∈ X | f(x) ≤ c }, where c is the 43 untilstop
f current ×current→ ∞
(cid:98)current solution cost [17]. The function c: X X R≥ Q
0 inﬁnitely large (line 2). The edge-queue, , holds all edges
denotes the true edge cost between two states. The function
× → ∞ from the start state to the goal states (line 4).
c: X X R≥ is an admissible estimate of this cost.
0
Let A be any set and let B and C be subsets of A, i.e., C. Approximation (Algorithm 1, Lines 7-13)
⊆ ← ← ∪
B,C A. The notation B + C is used for B B C ABIT* uses informed sampling [17] to focus its RGG
←− ← \
and B C for B B C. The cardinality of a set is approximation on the relevant region of the state space. The
|·|
denoted by and the minimum of an empty set is taken accuracyofthisapproximationincreaseswiththenumberof
to be inﬁnity. The Lebesgue measure of a set is denoted by sampled states but so does its complexity. This complexity
·
λ(), and the Lebesgue measure of an n-dimensional unit is reduced by pruning states that cannot improve the current
ball by ζ . The number of states per batch is denoted by m. solution (line 8 and Alg. 3) and shrinking the connection
n
radius as more states are sample(cid:16)d. T(cid:17)heradius, r, isupdated
B. Initialization (Algorithm 1, Lines 1-4) (cid:18) (cid:19) (cid:18) (cid:19)
as in [13], using the measure of the informed set, as in [17],
ABIT* starts by initializing the search tree with the start   (cid:98)  
1
sctoantetaianssittsherogoota.lTshteatesset(loifneun1c)o.nTnheectiendﬂasttiaotensfaincittoiar,llεy onl≥y r(q)..=η 2 1+ 1 λ Xf log(q) n,
≥ inﬂ n ζ q
n
1, and the truncation factor, ε 1, are initialized to be
trunc
132
Authorized licensed use limited to: University of New South Wales. Downloaded on September 20,2020 at 10:51:41 UTC from IEEE Xplore.  Restrictions apply. { } T
Algorithm 2: expand( x , ,X ,r) on the solution quality. A low inﬂation factor results in a
i unconnected
12 Eforoaultl←xp∅in{(cid:8)xi}do (cid:12)(cid:12) (cid:9) sbeuatrcahchtihevatesretqiguhirteesr bmoournedscoomnptuhteatisoonluatlioenffoqrutatloityc.oAmphliegthe
3 Eou(cid:98)t←+ {(x(cid:98)p,x∈c){∈E}(cid:98) ∪ } (cid:107) − (cid:107)≤ truncation factor promotes exploration of the region of the
45 foifragl(cid:98)(lxxpc)i+nc(cid:98)(xxp,xXc)u+ncohn(nxecc)te≤d∈mVin{gTx(xp)} x r do state space that could potentially contain better solutions by
≤ x Xgoal truncating the search once a loose bound on the solution
6 ifg(xp)+c(xp,xc) gT(xc)
7 Eout←+ (xp,xc) quality is achieved, which facilitates adding more samples.
A low truncation factor promotes exploiting the current
8 returnEout approximationofthestatespaceasthesearchisnottruncated
until a tight bound on the solution quality is guaranteed.
Algorithm 3: pr(cid:110)une(T,Xunco(cid:12)(cid:12)(cid:12)n(cid:98)nected,Xgoal) (cid:111) The update policies of these two factors are user-tuned
1 Xunco(cid:110)nnected←−(cid:12)(cid:12)(cid:12) (cid:98) x∈Xunconnected (cid:111)f(x)≥∈min{gT(x)} parameters that balance exploiting the current RGG with
2 V ←− (cid:110)x∈V f(x)(cid:12)(cid:12)(cid:12)>(cid:98)∈min{gT(x)} x Xg(cid:98)oal epxoplilcoireisngustehdefostrattehesepxapcee.rimSeecnttiaolnreVsulptsre.sents the speciﬁc
←− (cid:111)∈ x Xgoal { }
3 E (xp,xc) E f(xp)>x∈mXignoalgT(x) orf(xc)> IV. FORMALANALYSIS
{ }
∈min gT(x) This paper uses Deﬁnition 24 in [13] as the deﬁnition of
x Xgoal
45 XVu←−nco{nxncec∈tedV←+| {(cid:54)∃xcxp∈∈VV| s(cid:54).∃t.x(pxp∈,Vxc)s.∈t.E(x}p,xc)∈E} ablamseodst-psluarnenaesrymisptaoltmicosotp-stiumreallyitya.sNymotpetothtiactalalynyospatmimpalilngi-f
(i) its underlying graph almost-surely contains an asymp-
whereq isthenumberofsampledstatesintheinformedset, totically optimal path, and (ii) its underlying graph-search
η > 1 is a tuning parameter, and n is the state space di- is asymptotically resolution-optimal. These conditions are
mension.Faster-decreasingradiiareprovidedin[21,25]but sufﬁcient but not necessary.
are not used in this paper to isolate the reasons for ABIT*’s
A. Almost-SureExistenceofanAsymptoticallyOptimalPath
improved performance relative to existing algorithms.
ABIT*usesthesameincreasinglydenseRGGapproxima-
D. Search (Algorithm 1, Lines 19-41)
tion as BIT*. Since BIT* is an almost-surely asymptotically
ABIT* delays expensive computation of true edge cost optimalalgorithm[6],thisapproximationmustalmost-surely
(e.g.,collisionchecks)withalazysearchsimilartoanedge- contain an asymptotically optimal path.
queue version of Anytime Truncated D* (ATD*) [26]. This
B. Asymptotically Resolution-Optimal Search
queue is ordered lexicographically by (inﬂated) potential
solutioncostandthencost-to-come.Asearchiterationstarts Theorem 1 states that ABIT*’s search processes at least
by removing the edge with the lowest queue value from the all of the edges processed by ATD*, which is an anytime,
queue (line 19). If this edge is part of the search tree, then incremental search algorithm that ﬁnds a solution within
thechildstateisexpanded(i.e.,itsoutgoingedgesareadded ε ε of the optimum [26]. Since ABIT* updates the
trunc inﬂ
to the queue) if it has not already been expanded during the cost-to-come of any vertex under the same condition as
current search (lines 22–26 and Alg. 2). ABIT* otherwise ATD*, ABIT* also ﬁnds a solution whose cost is within
checks if the new edge can possibly contribute to a solution ε ε of the optimum. ABIT* therefore asymptotically
trunc inﬂ
better than the current one (lines 27–30). ﬁnds a resolution-optimal path when the product ε ε
trunc inﬂ
An edge that passes these checks improves the cost-to- tends to one as the number of samples approaches inﬁnity,
come of the child state and possibly the current solution.
lim ε ε =1.
If the child state is already part of the tree, adding this q→∞ trunc inﬂ
edge constitutes a rewiring (line 32). Otherwise, this state Theorem 1. ABIT*’s search processes at least all of the
is removed from the set of unconnected states (line 34) and edges that would be processed by ATD* for a given RGG.
added to the search tree (line 35). In both cases, the edge is
Proof. ATD* can handle improved and worsened state con-
added to the search tree (line 36).
nections, but adding states and edges to a graph can only
After adding an edge, the child state is expanded unless
improve connections. Therefore only states with improved
it has already been expanded during the current search, in
cost-to-come (called overconsistent in [26]) are considered.
which case it is added to the set of inconsistent vertices
ATD*’s vertex queue is ﬁrst converted to a compatible
(lines 37–41).
edge queue and it is then shown that ATD*’s termination
E. Approximation,Inﬂation,andTruncationUpdatePolicies criterion is stricter than that of ABIT*.
(cid:98)
The approximation is updated when a desired bound on ATD*computesasortkeyforeverystate,x,initsqueue,
the resolution optimality is achieved, which depends on the key ∗(x)..=g [x]+ε h(x).
inﬂation and truncation factors (line 7). These factors are ATD p inﬂ
updated after each search of the current RGG (lines 14 The cost-to-come label, gp[x], is recursively deﬁned as
{ }
and15).Ahighinﬂationfactorbiasesthesearchtowardsthe g [x]..=min g [x ]+c(x ,x) ,
p ∈ p p p
goalanddecreasessolutiontimesbutresultsinloosebounds xp Xp(x)
133
Authorized licensed use limited to: University of New South Wales. Downloaded on September 20,2020 at 10:51:41 UTC from IEEE Xplore.  Restrictions apply. used the default value of 0.4 as the approximation factor.
0.3 1.0 RRT# sampled the entire state space. RRT-based algorithms
usedagoalbiasof5%andmaximumedgelengthsof0.5and
1.25 in R4 and R8, respectively. BIT* and ABIT* sampled
0.03
1.0 100 states per batch regardless of the state space dimension,
2.0 start goal 2.0 start goal had graph pruning turned off, and used Euclidean distance
0.5 0.5 as a heuristic. ABIT* was conﬁgured to search each RGG
0.85 1.0 1.0 twice. First with a highly inﬂated heuristic, εinﬂ =106, and
0.3 then again with a lower factor, εinﬂ = 1+10/q. A single
truncation factor, εtrunc =1+5/q was used for all searches.
2.0 2.0 All parameters were tuned to optimize planner performance
(a)Wallgap (b)Randomrectangles on test problems.
Fig. 2: A 2D illustration of the simulated planning problems used in
SectionV.Thestatespace,X⊂Rn,isboundedbyahypercubeofwidth A. Experimental Problems
twoforbothproblems.Tendifferentinstantiationsoftherandomrectangles
The planners were tested on two problems in R4 and R8.
experimentweretested.TheresultsarepresentedinFig.3.
Theﬁrstconsistedofawallwithanarrowgapsuchthatvalid
where X (x) denotes the discovered potential parents of x paths can only be in one of two homotopy classes (Fig. 2a).
p
and the base case is g [x ]=0. ATD* processes vertices Eachplannerwasrun100timesforonesecondwithdifferent
Qp start
initsvertexqueue, V ∗,inorderofascendingkeyvalues, random seeds. Figures 3a and 3d show the achieved success
ATD
{ } rates and median path lengths of all tested planners.
x = arg min key ∗(x) .
next ∈Q ATD The second consisted of axis-aligned hyperrectangles of
x V ∗
ATD
random widths placed randomly in the state space (e.g.,
Wheneverabetterconnectiontoastateinthequeueisfound,
Fig. 2b). Ten different random problems were generated for
the key of this state is updated and the queue is resorted.
each state space dimension and planners were run 100 times
The queue could alternatively contain multiple instances
oneachinstantiation.Theruntimewaslimitedtooneand40
ofthesamestate,eachwithadifferentparentandkeyvalue.
secondsforproblemsinR4 andR8,respectively.Figures3b,
Selecting the minimum from this queue would ensure that
3c, 3e, and 3f show the achieved success rates and median
the best discovered connection for each state is considered
path costs of all tested planners for the two problems that
ﬁrst. This would be equi(cid:110)valent to an edge version of AT(cid:111)D*
Q(cid:98) resulted in the best and worst performances of ABIT*, as
where the next connection from the edge queue, E ∗, is
ATD deﬁned by its initial solution time relative to RRT-Connect.
(x ,x ) = arg min g [x ]+c(x ,x )+ε h(x ) .
p c next ∈Q p i i j inﬂ j B. Planning for Axel
(xi,xj(cid:8)) EATD∗ (cid:9)
(cid:98) ∈ ThebeneﬁtsofABIT*’sadvancedgraph-searchtechniques
ATD*’sinnerloopterminatesifforanygoalx X
goal goal werealsodemonstratedonreal-worldroboticplanningprob-
min g [x ]+c(x ,x )+ε h(x ) lemsduringaweek-longNASA/JPL-Caltechﬁeldtestinthe
∈Q p i i j inﬂ j
(xi,xj) EATD∗≥ min{g [x ],gT(x )} MojaveDesertwiththeAxelRoverSystem(Fig.1).Axelisa
p goal goal . tethered robotic platform designed for near-vertical surfaces
ABIT*’s se(cid:8)arch termin(cid:98)ates if forεat(cid:98)rnuyncgo(cid:9)al x ∈X and other challenging or unstable terrain. The complexity
goal goal of the terrain and its interaction with the tether make for
min gT(x )+c(x ,x )+h(x(cid:98)) ≥ gT(xgoal). challenging planning problems because state evaluations are
(xi,xj)∈QABIT∗ i i j j εtrunc computationally expensive. ABIT* typically found initial
This is less strict, as the heuristic, c, is admissible, the solutions to these problems in under two seconds. This
inﬂation factor, ε , is greater than or equal to one, and for allowed it to spend the remaining computational time to
∈ inﬂ ≥
allstates,x X,itholdsthatg [x ] gT(x )asrewirings improve this solution by repairing its search and increasing
i p i i
canonlyimprovethecost-to-cometostates.ABIT*therefore the density of its approximation. This resulted in 95.12%
considers at least all edges that ATD* would consider. autonomy by distance, despite the challenging terrain.
VI. DISCUSSION&CONCLUSION
V. EXPERIMENTALRESULTS
ABIT* demonstrates that the perspective of separate ap-
ABIT* was compared against the Open Motion Plan-
proximationandsearchinsingle-queryalmost-surelyasymp-
ning Library (OMPL) [27] versions of RRT-Connect, RRT*,
totically optimal sampling-based planning can be used to
RRT#, LBT-RRT, and BIT* on simulated problems in R4
design algorithms with improved anytime performance. Fig-
andR8 (Fig.2)1.Theobjectiveforthealmost-surelyasymp-
ure 3 shows that ABIT* outperforms other single-query,
totically optimal planners was to minimize path length. The
almost-surelyasymptoticallyoptimalplannersbyﬁndingini-
RGG constant η was set to 1.1 for all planners. LBT-RRT
tial solutions quickly and converging to an optimal solution
in an anytime manner without wasting computational effort.
1TheperformancesweremeasuredwithOMPLv1.4.1onalaptopwith
16GBofRAMandanInteli7-4910MQprocessorrunningUbuntu18.04. The only tested planner that ﬁnds initial solutions faster
134
Authorized licensed use limited to: University of New South Wales. Downloaded on September 20,2020 at 10:51:41 UTC from IEEE Xplore.  Restrictions apply. 100 100 100
%] %] %]
[ [ [
cess 50 better cess 50 cess 50
c c c
u u u
S 0 S 0 S 0
st 5 better st 5 st2.5
o o o
c 4 c c 2
n n n
a a 3 a
edi 3 edi edi1.5
M 2 M M
1 1
10−3 10−2 10−1 100 10−2 10−1 100 10−3 10−2 10−1 100
Computationaltime[s] Computationaltime[s] Computationaltime[s]
(a)WallgapinR4 (b)RandomrectanglesinR4 (best) (c)RandomrectanglesinR4 (worst)
100 100 100
%] %] %]
[ [ [
ss 50 ss 50 ss 50
e e e
c c c
c c c
u u u
S 0 S 0 S 0
9
st st 5 st 7
o o o
c c c
n 7 n n 5
a a a
Medi 5 Medi 3 Medi 3
3 1 1
10−3 10−2 10−1 100 10−1 100 101 10−1 100 101
Computationaltime[s] Computationaltime[s] Computationaltime[s]
(d)WallgapinR8 (e)RandomrectanglesinR8 (best) (f)RandomrectanglesinR8 (worst)
RRT-Connect RRT* RRT# LBT-RRT BIT* ABIT*
Fig.3:ResultsfromtheexperimentsdescribedinSectionV-A.Theresultsfromthewallgapexperimentareshownintheplots(a)and(d)forR4 and
R8, respectively. The plots (b) and (c) show the best and worst instances of ten random rectangles experiments in R4. The plots (e) and (f) show the
best and worst instances in R8. The squares in the cost plots show the median initial costs and times while the lines show the median cost over time
foralmost-surelyasymptoticallyoptimalplanners(unsuccessfulrunsweretakenasinﬁnitecosts).Theerrorbarsshowanonparametric99%conﬁdence
intervalonthesolutioncostandtime.Notethatinplot(f)lessthan50trialsofLBT-RRT,RRT*andRRT# succeeded,sotheirmediancostisinﬁnity.
than ABIT* is RRT-Connect, which is not an almost-surely onceasufﬁcientboundonthesolutionqualityofthecurrent
asymptotically optimal algorithm and cannot improve its solutionisachievedavoidswastingcomputationaleffortfully
initial solution when given more computational time. exploitinganapproximationthatwillchange.Flexibleupdate
ABIT* relies on admissible heuristic estimates of edge- policies of the inﬂation and truncation factors ensure that
costsbetweenstatesandthecost(cid:98)-to-gofro(cid:98)mstatestoagoal. ABIT* can leverage high and low inﬂation and truncation
Ifnoheuristicsareavailable,ABIT*canberunwiththetriv- depending on the accuracy of its approximation. ABIT* is
∀ ∈ ≡ ≡
ial heuristic, i.e., x ,x X, h(x ) c(x ,x ) 0. An notverysensitivetotheexactformofthesepolicies.Results
i j i i j
asymmetric bidirectional search could alternatively be used comparable to the ones presented in this paper are achieved
to simultaneously estimate and exploit a problem-speciﬁc whenever the initial search is conducted with a very high
heuristic, as in Adaptively Informed Trees (AIT*) [28]. inﬂation factor and both factors asymptotically tend to one
IfABIT*isrunwithunitinﬂationandtruncationfactors,it as the number of sampled states approaches inﬁnity.
canbeviewedasasimpliﬁedbutequallyperformantversion ABIT* also shows the beneﬁts of using advanced graph-
of BIT* that cascades rewirings. ABIT* uses a single edge search techniques in sampling-based planning on real-world
queue instead of BIT*’s dual vertex and edge queues and pathplanningproblemsposedbyAxel,aNASA/JPL-Caltech
avoids repeated collision checks by caching checked edges rover specialized for navigation on challenging terrain.
in an object-oriented manner instead of labelling states old Information on the OMPL implementation of ABIT* is
ornewasinBIT*.Thisclariﬁestheconceptualideasbehind available at https://robotic-esp.com/code/.
thesealgorithmsandsimpliﬁestheirimplementationwithout
adding any practically signiﬁcant computational costs. VII. ACKNOWLEDGEMENTS
This improved implementation allows ABIT* to balance ThisresearchwasfundedbyUKResearchandInnovation
exploiting its current approximation of the state space with and EPSRC through the Robotics and Artiﬁcial Intelligence
exploring the relevant regions of the state space. This is for Nuclear (RAIN) research hub [EP/R026084/1]. We want
achieved using advanced graph-search techniques similar to to thank the entire NASA/JPL-Caltech Robotic Surface Mo-
anytime repairing and truncated search algorithms. bilityGroupfortheirsupportontheAxelRoverSystemand
An inﬂated heuristic biases ABIT*’s search towards the extend special thanks to Travis, Jacob, Issa, and Mike for
goalandﬁndsinitialsolutionsquickly.Truncatingthesearch their help with integrating ABIT* onto Axel.
135
Authorized licensed use limited to: University of New South Wales. Downloaded on September 20,2020 at 10:51:41 UTC from IEEE Xplore.  Restrictions apply. REFERENCES the International Conference on Robotics and Automa-
tion (ICRA), vol. 3, 1997, pp. 2719–2726.
[1] P. E. Hart, N. J. Nilsson, and B. Raphael, “A formal [16] J. Kuffner and S. LaValle, “RRT-Connect: An efﬁcient
basis for the heuristic determination of minimum cost approach to single-query path planning,” in Proceed-
paths,” IEEE Transactions on Systems Science and ings of the International Conference on Robotics and
Cybernetics, vol. 4, no. 2, pp. 100–107, 1968. Automation (ICRA), vol. 2, 2000, pp. 995–1001.
[2] E. W. Dijkstra, “A note on two problems in connexion [17] J. D. Gammell, T. D. Barfoot, and S. S. Srinivasa,
withgraphs,”NumerischeMathematik,vol.1,pp.269– “Informed sampling for asymptotically optimal path
271, 1959. planning,”IEEETransactionsonRoboticsandAutoma-
[3] S. M. LaValle and J. J. Kuffner Jr., “Randomized tion, vol. 34, no. 4, pp. 966–984, 2018.
kinodynamic planning,” The International Journal of [18] J. Nasir, F. Islam, U. Malik, Y. Ayaz, O. Hasan,
Robotics Research, vol. 20, no. 5, pp. 378–400, 2001. M. Khan, and M. S. Muhammad, “RRT*-Smart: A
[4] L. E. Kavraki, P. Sˇvestka, J.-C. Latombe, and M. H. rapid convergence implementation of RRT*,” Interna-
Overmars,“Probabilisticroadmapsforpathplanningin tional Journal of Advanced Robotic Systems, vol. 10,
highdimensionalconﬁgurationspaces,”IEEETransac- no. 7, p. 299, 2013.
tions on Robotics and Automation, vol. 12, no. 4, pp. [19] O. Arslan and P. Tsiotras, “Use of relaxation methods
566–580, 1996. in sampling-based algorithms for optimal motion plan-
[5] J. D. Gammell, S. S. Srinivasa, and T. D. Barfoot, ning,” in Proceedings of the International Conference
“Batch Informed Trees (BIT*): Sampling-based opti- on Robotics and Automation (ICRA), 2013, pp. 2421–
mal planning via the heuristically guided search of im- 2428.
plicit random geometric graphs,” in Proceedings of the [20] O. Salzman and D. Halperin, “Asymptotically-optimal
International Conference on Robotics and Automation motion planning using lower bounds on cost,” in Pro-
(ICRA), 2015, pp. 3067–3074. ceedings of the International Conference on Robotics
[6] J. D. Gammell, T. D. Barfoot, and S. S. Srinivasa, and Automation (ICRA), 2015, pp. 4167–4172.
“Batch Informed Trees (BIT*): Informed asymptoti- [21] L. Janson, E. Schmerling, A. Clark, and M. Pavone,
cally optimal anytime search,” The International Jour- “Fast Marching Tree: A fast marching sampling-based
nal of Robotics Research, 2020. method for optimal motion planning in many dimen-
[7] M. Likhachev, G. J. Gordon, and S. Thrun, “ARA*: sions,”TheInternationalJournalofRoboticsResearch,
Anytime A* with provable bounds on sub-optimality,” vol. 34, no. 7, pp. 883–921, 2015.
Advances in Neural Information Processing Systems [22] A. Valero-Gomez, J. V. Gomez, S. Garrido, and
(NIPS), pp. 767–774, 2004. L. Moreno, “The path to efﬁciency: Fast marching
[8] I. A. D. Nesnas, J. B. Matthews, P. Abad-Manterola, method for safer, more efﬁcient mobile robot trajecto-
J. W. Burdick, J. A. Edlund, J. C. Morrison, R. D. ries,” IEEE Robotics & Automation Magazine, vol. 20,
Peters, M. M. Tanner, R. N. Miyake, B. S. Solish, no. 4, pp. 111–120, 2013.
and R. C. Anderson, “Axel and DuAxel rovers for the [23] A. C. Holston, D.-H. Kim, and J.-H. Kim, “Fast-BIT*:
sustainable exploration of extreme terrains,” Journal of Modiﬁedheuristicforsampling-basedoptimalplanning
Field Robotics, vol. 29, no. 4, pp. 663–685, 2012. with a faster ﬁrst solution and convergence in implicit
[9] D. Bertsekas, “Convergence of discretization proce- randomgeometricgraphs,”inInternationalConference
duresindynamicprogramming,”IEEETransactionson on Robotics and Biomimetics, 2017, pp. 1892–1899.
Automatic Control, vol. 20, no. 3, pp. 415–419, 1975. [24] J. D. Gammell, “Informed anytime search for continu-
[10] R. Bellman, Dynamic Programming. Princeton Uni- ous planning problems,” Ph.D. dissertation, University
versity Press, 1957. of Toronto, 2017.
[11] M. Penrose, Random Geometric Graphs. Oxford [25] L. Janson, B. Ichter, and M. Pavone, “Deterministic
University Press, 2003. sampling-based motion planning: Optimality, complex-
[12] S. Koenig, M. Likhachev, and D. Furcy, “Lifelong ity, and performance,” The International Journal of
Planning A*,” Artiﬁcial Intelligence, vol. 155, no. 1- Robotics Research, vol. 37, no. 1, pp. 46–61, 2018.
2, pp. 93–146, 2004. [26] S. Aine and M. Likhachev, “Truncated incremental
[13] S. Karaman and E. Frazzoli, “Sampling-based algo- search,” Artiﬁcial Intelligence, vol. 234, pp. 49–77,
rithms for optimal motion planning,” The International 2016.
Journal of Robotics Research, vol. 30, no. 7, pp. 846– [27] I. A. Sucan, M. Moll, and L. E. Kavraki, “The Open
894, 2011. Motion Planning Library,” IEEE Robotics & Automa-
[14] R. Bohlin and L. E. Kavraki, “Path planning using tion Magazine, vol. 19, no. 4, pp. 72–82, 2012.
Lazy-PRM,” in Proceedings of the International Con- [28] M. P. Strub and J. D. Gammell, “Adaptively Informed
ference on Robotics and Automation (ICRA), vol. 1, Trees (AIT*): Fast asymptotically optimal path plan-
2000, pp. 521–528. ningthroughadaptiveheuristics,”inProceedingsofthe
[15] D.Hsu,J.-C.Latombe,andR.Motwani,“Pathplanning International Conference on Robotics and Automation
in expansive conﬁguration spaces,” in Proceedings of (ICRA), 2020.
136
Authorized licensed use limited to: University of New South Wales. Downloaded on September 20,2020 at 10:51:41 UTC from IEEE Xplore.  Restrictions apply. 